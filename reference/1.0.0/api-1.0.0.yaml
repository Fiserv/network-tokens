#######################################################################
## Added X-Card-Brand header to all the APIs to route the request to the right adapter.
## Removed tokenReferenceId from Asset API. It's not required by Token Provider.
## Added Public keye nec API.
## Added a new eventype for PAN Data notification as part of CAU process.
## Added token object in Card API.
## Update in notification payload. Encryption added as part of notificaiton.
## Message attribute if real time CAU fails.
#######################################################################
openapi: 3.0.0
info:
  version: 1.0.8
  title: Network Supported APIs
  description: This Specification document lists the APIs for Token Provision and its Lifecycle Management.

servers:
  - url:  https://connect-qa.fiservapis.com
  - url:  https://connect-uat.fiservapis.com
  - url:  https://connect.fiservapis.com

paths:
  /network-tokens/v1/tokens:
    post:
      tags:
        - Provision Token
      x-group-name: Network Tokens
      x-proxy-name: Provision Token
      description: This API will provison a Network Token for a PAN associated with the underlying issuer and card brands like Visa, Master Card, American Express and Discover.
      parameters:
        - in: header
          name: X-Card-Brand
          description: Card brand possible values are VI, MC, DI, AX
          required: true
          schema:
            $ref: '#/components/schemas/CardBrand'
        - in: header
          name: Client-Request-Id
          description: Contains a unique ID generated by the client that can be used for enforcing idempotency on POST actions. POSTs are inherently non-idempotent and submitting the exact same request multiple times would create duplicate resources.
            Note:- Omitting this header increases the risk of duplicate transactions.
          required: true
          schema:
            type: string
        - in: header
          name: Timestamp
          description: Epoch timestamp in the request initiating system
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: Authorization information for the request. Format- `HMAC {hmacToken}`
          required: true
          schema:
            type: string

      requestBody:
        description: Details required for provision a PAN data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisionTokenRequest'
            examples:
              NetworkToken:
                $ref: '#/components/examples/ProvisionTokenRequest'
      responses:
        '201':
          description: provision response - Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionQueueResponse'
              examples:
                ProvisionQueueResponse:
                  $ref: '#/components/examples/ProvisionQueueResponse'

        '400':
          description: provision response - Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: provision response - Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '408':
          description: provision response - Request timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: provision response - Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: provision response - Bad Gateway Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: provision response - Service Unavailable error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: provision response - Gateway Timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /network-tokens/v1/tokens/{provisionRequestId}/status:
    get:
      tags:
        - Provision Token Status
      x-group-name: Network Tokens
      x-proxy-name: Provision Token Status
      description: This API will return the current provisioning status of a Network Token. Provisioning requests are immediately followed by web hook notifications. This API can be used additionally to request the provisioning status.
        <b>This API is rate limited and may start returning http 429 status if overused.</b>
      parameters:
        - in: header
          name: X-Card-Brand
          description: Card brand possible values are VI, MC, DI, AX
          required: true
          schema:
            $ref: '#/components/schemas/CardBrand'
        - in: header
          name: Client-Request-Id
          description: Contains a unique ID generated by the client that can be used for enforcing idempotency on POST actions. POSTs are inherently non-idempotent and submitting the exact same request multiple times would create duplicate resources.
            Note:- Omitting this header increases the risk of duplicate transactions.
          required: true
          schema:
            type: string
        - in: header
          name: Timestamp
          description: Epoch timestamp in the request initiating system
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: Authorization information for the request. Format- `HMAC {hmacToken}`
          required: true
          schema:
            type: string
        - in: path
          name: provisionRequestId
          description: provisionRequestId provided in response during tokenization.
          required: true
          schema:
            type: string

      responses:
        '201':
          description: provision response - Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionQueueStatusResponse'
              examples:
                ProvisionQueueInProgressStatus:
                  $ref: '#/components/examples/ProvisionQueueStatusInProgressResponse'
                ProvisionQueueSuccessStatus:
                  $ref: '#/components/examples/ProvisionQueueStatusSuccessResponse'

        '400':
          description: provision response - Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: provision response - Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '408':
          description: provision response - Request timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: provision response - Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: provision response - Bad Gateway Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: provision response - Service Unavailable error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: provision response - Gateway Timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /network-tokens/v1/tokens/notification:
    post:
      tags:
        - Push Notification
      x-group-name: Network Tokens
      x-proxy-name: Push Notification
      description: This API will push Token updates to the client received from card schemes through Fiserv. The Update contains Token Lifecycle event notification or Provisioned Token event notification details.
      parameters:
        - in: header
          name: X-Card-Brand
          description: Card brand possible values are VI, MC, DI, AX
          required: true
          schema:
            $ref: '#/components/schemas/CardBrand'
        - in: header
          name: Client-Request-Id
          description: Contains a unique ID generated by the client that can be used for enforcing idempotency on POST actions. POSTs are inherently non-idempotent and submitting the exact same request multiple times would create duplicate resources.
            Note:- Omitting this header increases the risk of duplicate transactions.
          required: true
          schema:
            type: string
        - in: header
          name: Timestamp
          description: Epoch timestamp in the request initiating system
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: Authorization information for the request. Format- `HMAC {hmacToken}`
          required: true
          schema:
            type: string

      requestBody:
        description: This API is to push significant Token updates to Token Requestor.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
            examples:
              LifeCycleNotification:
                $ref: '#/components/examples/LifeCycleNotificationRequest'
              ProvisionNotification:
                $ref: '#/components/examples/ProvisionNotificationRequest'
              ErrorNotification:
                $ref: '#/components/examples/ErrorNotificationRequest'
              PanUpdateNotification:
                $ref: '#/components/examples/PanUpdateNotification'
              PanUpdateNotificationError:
                $ref: '#/components/examples/PanUpdateNotificationError'

      responses:
        '201':
          description: provision response - Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoContent'
        '400':
          description: provision response - Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: provision response - Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '408':
          description: provision response - Request timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: provision response - Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: provision response - Bad Gateway Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: provision response - Service Unavailable error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: provision response - Gateway Timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /network-tokens/v1/tokens/{tokenReferenceId}:
    patch:
      tags:
        - Token Lifecycle
      x-group-name: Network Tokens
      x-proxy-name: Token Lifecycle
      description: This API will change the status of the token as requested by the merchant to the card schemes through Fiserv. Token status change inlcudes ACTIVE, SUSPEND and UNSUSPEND.
      parameters:
        - in: header
          name: X-Card-Brand
          description: Card brand possible values are VI, MC, DI, AX
          required: true
          schema:
            $ref: '#/components/schemas/CardBrand'
        - in: header
          name: Client-Request-Id
          description: Contains a unique ID generated by the client that can be used for enforcing idempotency on POST actions. POSTs are inherently non-idempotent and submitting the exact same request multiple times would create duplicate resources.
            Note:- Omitting this header increases the risk of duplicate transactions.
          required: true
          schema:
            type: string
        - in: header
          name: Timestamp
          description: Epoch timestamp in the request initiating system
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: Authorization information for the request. Format- `HMAC {hmacToken}`
          required: true
          schema:
            type: string
        - in: path
          name: tokenReferenceId
          description: The tokenReferenceId provided in response of /provision-tokens API.
          required: true
          schema:
            type: string

      requestBody:
        description: Details required to manage token lifecycle.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTokenRequest'
            examples:
              UpdateToken:
                $ref: '#/components/examples/UpdateTokenRequest'
      responses:
        '204':
          description: provision response - Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoContent'
        '400':
          description: provision response - Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: provision response - Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: provision response - not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '408':
          description: provision response - Request timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: provision response - Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: provision response - Bad Gateway Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: provision response - Service Unavailable error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: provision response - Gateway Timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Token Details
      x-group-name: Network Tokens
      x-proxy-name: Token Detail
      description: This API will return the status and details for a tokenReferenceId. It can be used to check current token state or in exception scenarios (such as network time out) to ensure that external systems remain in sync with the Token.
        <b>This API is rate limited and may start returning http 429 status if overused.</b>
      parameters:
        - in: header
          name: X-Card-Brand
          description: Card brand possible values are VI, MC, DI, AX
          required: true
          schema:
            $ref: '#/components/schemas/CardBrand'
        - in: header
          name: Client-Request-Id
          description: Contains a unique ID generated by the client that can be used for enforcing idempotency on POST actions. POSTs are inherently non-idempotent and submitting the exact same request multiple times would create duplicate resources.
            Note:- Omitting this header increases the risk of duplicate transactions.
          required: true
          schema:
            type: string
        - in: header
          name: Timestamp
          description: Epoch timestamp in the request initiating system
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: Authorization information for the request. Format- `HMAC {hmacToken}`
          required: true
          schema:
            type: string
        - in: path
          name: tokenReferenceId
          description: The tokenReferenceId provided in response of /provision-tokens API.
          required: true
          schema:
            type: string

      responses:
        '200':
          description: provision response - Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTokenResponse'
              examples:
                GetToken:
                  $ref: '#/components/examples/GetTokenResponse'
        '400':
          description: provision response - Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: provision response - Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: provision response - not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '408':
          description: provision response - Request timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: provision response - Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: provision response - Bad Gateway Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: provision response - Service Unavailable error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: provision response - Gateway Timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /network-tokens/v1/tokens/{tokenReferenceId}/cryptogram:
    post:
      tags:
        - Cryptogram
      x-group-name: Network Tokens
      x-proxy-name: Cryptogram
      description: This API will return single use cryptogram to be used by client in Network Token consumer initiated transaction (CIT)).
      parameters:
        - in: header
          name: X-Card-Brand
          description: Card brand possible values are VI, MC, DI, AX
          required: true
          schema:
            $ref: '#/components/schemas/CardBrand'
        - in: header
          name: Client-Request-Id
          description: Contains a unique ID generated by the client that can be used for enforcing idempotency on POST actions. POSTs are inherently non-idempotent and submitting the exact same request multiple times would create duplicate resources.
            Note:- Omitting this header increases the risk of duplicate transactions.
          required: true
          schema:
            type: string
        - in: header
          name: Timestamp
          description: Epoch timestamp in the request initiating system
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: Authorization information for the request. Format- `HMAC {hmacToken}`
          required: true
          schema:
            type: string
        - in: path
          name: tokenReferenceId
          description: The tokenReferenceId provided in response of /provision-tokens API.
          required: true
          schema:
            type: string

      requestBody:
        description: Details required for provision a PAN data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CryptoGramRequest'
            examples:
              CryptoGram:
                $ref: '#/components/examples/CryptoGramRequest'
      responses:
        '201':
          description: provision response - Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoGramResponse'
              examples:
                CryptoGram:
                  $ref: '#/components/examples/CryptoGramResponse'
        '400':
          description: provision response - Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: provision response - Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: provision response - not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '408':
          description: provision response - Request timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: provision response - Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: provision response - Bad Gateway Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: provision response - Service Unavailable error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: provision response - Gateway Timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /network-tokens/v1/tokens/assets/{assetId}:
    get:
      tags:
        - Card Art
      x-group-name: Network Tokens
      x-proxy-name: Card Art
      description: This API will return the digital art asset associated with the token using assetId.
        <b>This API is rate limited and may start returning http 429 status if overused.</b>
      parameters:
        - in: header
          name: X-Card-Brand
          description: Card brand possible values are VI, MC, DI, AX
          required: true
          schema:
            $ref: '#/components/schemas/CardBrand'
        - in: header
          name: Client-Request-Id
          description: Contains a unique ID generated by the client that can be used for enforcing idempotency on POST actions. POSTs are inherently non-idempotent and submitting the exact same request multiple times would create duplicate resources.
            Note:- Omitting this header increases the risk of duplicate transactions.
          required: true
          schema:
            type: string
        - in: header
          name: Timestamp
          description: Epoch timestamp in the request initiating system
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: Authorization information for the request. Format- `HMAC {hmacToken}`
          required: true
          schema:
            type: string
        - in: path
          name: assetId
          description: The specific Token to be queried.
          required: true
          schema:
            type: string

      responses:
        '200':
          description: provision response - Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAssetResponse'
              examples:
                GetAsset:
                  $ref: '#/components/examples/GetAssetResponse'
        '400':
          description: provision response - Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: provision response - Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: provision response - not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '408':
          description: provision response - Request timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: provision response - Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: provision response - Bad Gateway Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: provision response - Service Unavailable error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: provision response - Gateway Timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /network-tokens/v1/tokens/{tokenReferenceId}/card:
    get:
      tags:
        - PAN
      x-group-name: Network Tokens
      x-proxy-name: Get Card
      description: This API will return the encrypted Card details associated with Network Token.
        <b>This API is rate limited and may start returning http 429 status if overused.</b>
      parameters:
        - in: header
          name: X-Card-Brand
          description: Card brand possible values are VI, MC, DI, AX
          required: true
          schema:
            $ref: '#/components/schemas/CardBrand'
        - in: header
          name: Client-Request-Id
          description: Contains a unique ID generated by the client that can be used for enforcing idempotency on POST actions. POSTs are inherently non-idempotent and submitting the exact same request multiple times would create duplicate resources.
            Note:- Omitting this header increases the risk of duplicate transactions.
          required: true
          schema:
            type: string
        - in: header
          name: Timestamp
          description: Epoch timestamp in the request initiating system
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: Authorization information for the request. Format- `HMAC {hmacToken}`
          required: true
          schema:
            type: string
        - in: path
          name: tokenReferenceId
          description: The tokenReferenceId provided in response of /provision-tokens API.
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Get Card Response - Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCardResponse'
              examples:
                GetPanWithPan:
                  $ref: '#/components/examples/GetCardResponse'
                GetPANWithNoPan:
                  $ref: '#/components/examples/GetCardResponseNoCardInfo'
                GetPanResponseError:
                  $ref: '#/components/examples/GetPanResponseError'
        '400':
          description: provision response - Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: provision response - Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: provision response - not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '408':
          description: provision response - Request timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: provision response - Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: provision response - Bad Gateway Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: provision response - Service Unavailable error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: provision response - Gateway Timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /network-tokens/v1/tokens/keys:
    get:
      tags:
        - Encryption Key
      x-group-name: Network Tokens
      x-proxy-name: Encryption Key
      description: This API will provide public key to encrypt payload content by the merchant for PAN to Network Token.
      parameters:
        - in: header
          name: X-Card-Brand
          description: Card brand possible values are VI, MC, DI, AX
          required: true
          schema:
            $ref: '#/components/schemas/CardBrand'
        - in: header
          name: Client-Request-Id
          description: Contains a unique ID generated by the client that can be used for enforcing idempotency on POST actions. POSTs are inherently non-idempotent and submitting the exact same request multiple times would create duplicate resources.
            Note:- Omitting this header increases the risk of duplicate transactions.
          required: true
          schema:
            type: string
        - in: header
          name: Timestamp
          description: Epoch timestamp in the request initiating system
          required: true
          schema:
            type: string
        - in: header
          name: Authorization
          description: Authorization information for the request. Format- `HMAC {hmacToken}`
          required: true
          schema:
            type: string

      responses:
        '201':
          description: provision response - Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeysResponse'
              examples:
                ProvisionQueueResponse:
                  $ref: '#/components/examples/KeysResponse'

        '400':
          description: provision response - Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: provision response - Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '408':
          description: provision response - Request timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: provision response - Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: provision response - Bad Gateway Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: provision response - Service Unavailable error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: provision response - Gateway Timeout error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    ##-------------------------------------
    ## Response Model
    ##-------------------------------------
    KeysResponse:
      title: Provides base64 encoded public key for PCI data encryption
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Keys'

    ProvisionQueueStatusResponse:
      title: Provides tokenization status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        tokenReferenceId:
          description: Token reference id for stored token which is used to retrieve Card details
          type: string
          example: "8a7f87f68cef0334018cef506da80002"
        tspName:
          $ref: '#/components/schemas/CardBrand'
    GetPanResposne:
      title: Provides the encrypted pan.
      type: object
      properties:
        card:
          $ref: '#/components/schemas/Card'
        token:
          $ref: '#/components/schemas/Token'
        status:
          $ref: '#/components/schemas/Status'
        cardBrand:
          $ref: '#/components/schemas/CardBrand'

    NotificationRequest:
      title: Push notification request.
      type: object
      required:
        - notification
      properties:
        notification:
          $ref: '#/components/schemas/Notification'

    Notification:
      description: Notification request structure outbound to merchant using webhook.
      type: object
      required:
        - token
        - card
      properties:
        card:
          $ref: '#/components/schemas/Card'
        token:
          $ref: '#/components/schemas/Token'
        cardBrand:
          $ref: '#/components/schemas/CardBrand'
        transactionInfo:
          $ref: '#/components/schemas/TransactionInfo'
        eventType:
          $ref: '#/components/schemas/EventType'

    Keys:
      description: Keys response structure
      type: object
      required:
        - keyId
        - status
        - expireDate
        - publicKey
      properties:
        keyId:
          description: Id associated with key pair.
          type: string
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        status:
          description: Status of the Key pair.
          type: string
          example: "ACTIVE, INACTIVE, EXPIRED"
        expireDate:
          description: Expire date of the Key pair.
          type: string
          example: "2024-02-01T10:46:14.087458148"
        publicKey:
          description: Base64 encoded public key for PCI data encryption.
          type: string
          example: "base64_enc_string"


    TransactionInfo:
      description: Details about provsion request transaction.
      type: object
      properties:
        clientRequestId:
          description: Request Id provided by the client at the time of queue token API call in the header - Client-Request-Id.
          type: string
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        provisionRequestId:
          description: Correlation Id generated by the MTRG after adding request to the queue.
          type: string
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"

    ErrorRequest:
      description: Error and transaction object.
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
        transactionInfo:
          $ref: '#/components/schemas/TransactionInfo'
        eventType:
          $ref: '#/components/schemas/EventType'

    CryptoGramRequest:
      title: Create CryptoGram request object model.
      type: object
      required:
        - cardBrand
        - transactionType
      properties:
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        cardBrand:
          $ref: '#/components/schemas/CardBrand'
        merchantInfo:
          $ref: '#/components/schemas/MerchantInfo'
        customerInfo:
          $ref: '#/components/schemas/CustomerInfo'

    CryptoGramResponse:
      title: Create CryptoGram response object model.
      type: object
      required:
        - token
        - crypto
      properties:
        token:
          $ref: '#/components/schemas/Token'
        crypto:
          $ref: '#/components/schemas/CryptoGram'

    ProvisionTokenRequest:
      title: Provision request object model
      type: object
      required:
        - provision
      properties:
        provision:
          $ref: '#/components/schemas/Provision'
        cardBrand:
          $ref: '#/components/schemas/CardBrand'


    ProvisionTokenResponse:
      title: Provision response object model
      type: object
      required:
        - provision
      properties:
        provision:
          $ref: '#/components/schemas/Provision'
        crypto:
          $ref: '#/components/schemas/CryptoGram'
        cardBrand:
          $ref: '#/components/schemas/CardBrand'

    UpdateTokenRequest:
      title: Provision request object model
      type: object
      required:
        - operation
        - updateReason
        - cardBrand
      properties:
        operation:
          $ref: '#/components/schemas/Operation'
        updateReason:
          $ref: '#/components/schemas/UpdateReason'
        cardBrand:
          $ref: '#/components/schemas/CardBrand'
        merchantInfo:
          $ref: '#/components/schemas/MerchantInfo'
        customerInfo:
          $ref: '#/components/schemas/CustomerInfo'

    ProvisionQueueResponse:
      title: Provision response object model
      type: object
      required:
        - provision
      properties:
        clientRequestId:
          description: Request Id provided at the time of API call in the header - Client-Request-Id.
          type: string
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        provisionRequestId:
          description: Corellation Id generated by the MTRG after adding request to the queue.
          type: string
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        cardBrand:
          $ref: '#/components/schemas/CardBrand'
        createdDate:
          description: Time in when the request was added into the queue.
          type: string
          example: "2021-09-28T09:07:44.716+00:00"

    GetAssetResponse:
      title: Get Asset response object model
      type: object
      required:
        - mediaContents
      properties:
        mediaContentType:
          description: Type of the media content. Example:- digitalCardArt, cardSymbol, termsAndConditions etc.,
          type: string
          example: "cardSymbol"
        mediaAltText:
          description: Specifies an alternate text for a media content.
          type: string
          example: "Front_Image"
        mediaContents:
          $ref: '#/components/schemas/MediaContents'

    GetTokenResponse:
      title: Provision response object model
      type: object
      required:
        - provision
      properties:
        provision:
          $ref: '#/components/schemas/Provision'
        cardBrand:
          $ref: '#/components/schemas/CardBrand'

    ##-------------------------------------
    ## Object Model
    ##-------------------------------------
    Provision:
      description: Provision card information.
      type: object
      required:
        - card
        - cryptoRequired
      properties:
        card:
          $ref: '#/components/schemas/Card'
        panSource:
          $ref: '#/components/schemas/PanSource'
        tokenInfo:
          $ref: '#/components/schemas/TokenInfo'
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        cryptogramRequired:
          description: If the flag is true then MTRG will first tokenize the card and then generate the Cryptogram also for that token. MTRG will make two API calls to networks. Once for Tokenization and other for Cryptogram.
          type: boolean
          example: false
          writeOnly: true
        merchantInfo:
          $ref: '#/components/schemas/MerchantInfo'
        customerInfo:
          $ref: '#/components/schemas/CustomerInfo'
        authorizationInfo:
          $ref: '#/components/schemas/AuthorizationInfo'
        issuerInfo:
          $ref: '#/components/schemas/IssuerInfo'

    IssuerInfo:
      description: Issuer metadata informations.
      type: object
      readOnly: true
      properties:
        issuerMetaData:
          $ref: '#/components/schemas/IssuerMetaData'


    CardMetaData:
      description: Card metadata informations.
      type: object
      readOnly: true
      properties:
        cardType:
          description: Card type, Debit/Credit.
          type: string
          example: "Credit"
        cardBrandLogoAssetId:
          description: Logo asset associated with Card. UUID for uniqueness.
          type: string
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        cardBrandDescription:
          description: A short description for this product. Always returned in Product Configuration object.
          type: string
          example: "SHORT_DESCRIPTION"
        termsAndConditionsId:
          description: Id associated with terms and condition. UUID for uniqueness.
          type: string
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        foregroundColorRGB:
          description: Card Art foreground color.
          type: string
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        backgroundColorRGB:
          description: Card Art background color.
          type: string
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        labelColorRGB:
          description: Card Art label color.
          type: string
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"

    IssuerMetaData:
      description: Issuer metadata information's
      type: object
      readOnly: true
      properties:
        name:
          description: Issuer Name.
          type: string
          example: "Bank Of America"
          maximum: 36
        emailAddress:
          description: Email address associated with Issuer.
          type: string
          example: "test@somebank.com"
        contactNumber:
          description: Phone number associated with Issuer.
          type: string
          example: "800-245-0092"
          maximum: 10
        website:
          description: Issuer website
          type: string
          example: "https://somebank.com"
        privacyPolicy:
          description: Issuer website, privacy url.
          type: string
          example: "https://somebank.com/privacy"
        termsConditions:
          description: Issuer website, terms url.
          type: string
          example: "https://somebank.com/terms"

    MerchantInfo:
      description: Information about merchant - Required only for Rupay.
      type: object
      writeOnly: true
      required:
        - merchantId
        - merchantName
      properties:
        merchantId:
          description: Unique Id provided by frontend(north/south/memphis/oma) for a merchant at the time of boarding .
          type: string
          example: "54234509"
          maximum: 36
        merchantName:
          description: Name provided by the merchant at the time of boarding - Doing Business As.
          type: string
          example: "Microsoft LLC."
          maximum: 45

    CustomerInfo:
      description: Information about customer - Required Only for Rupay.
      type: object
      writeOnly: true
      required:
        - consumerId
      properties:
        consumerId:
          description: Unique profile Id associated with each customer.
          type: string
          example: "2d8a1360a24841e1a5677"
          maximum: 64

    AuthorizationInfo:
      description: Information about Auth transaction - Required Only for Rupay.
      type: object
      writeOnly: true
      required:
        - authRefNo
      properties:
        authRefNo:
          description: Unique Auth Id for the transaction created before tokenization.
          type: string
          example: "2d8a1360a24841e1a5677"
          maximum: 36
    GetCardResponse:
      description: Tokenized card details
      type: object
      properties:
        card:
          description: Card information
          type: object
          properties:
            cardNumber:
              description: Base 64 encoded encrypted card number. Use private key to decrypt card number
              type: string
              example: "base64_encoded_enc_pan_string"
            expiryDate:
              $ref: '#/components/schemas/ExpiryDate'
        token:
          description: Token details
          type: object
          properties:
            tokenReferenceId:
              description: Token reference id for stored token which is used to retrieve Card details
              type: string
              example: "8a7f87f68cef0334018cef506da80002"
        cardBrand:
          $ref: '#/components/schemas/CardBrand'
        status:
          $ref: '#/components/schemas/Status'
    Card:
      description: Card account Information.
      type: object
      required:
        - cardNumber
        - cardType
        - expiryDate
      properties:
        cardNumber:
          description: Primary account number, can only be sent when vaulting an account.  This field will NOT be present in responses.
          type: string
          example: "4111111111111111"
          writeOnly: true
        alias:
          description: Last four values of the cardNumber
          type: string
          readOnly: true
          example: "4567"
        cardBrandLogoAssetId:
          description: Asset associated with Card.
          type: string
          example: "SOME_RANDOM_ID"
          readOnly: true
        cardBrandDescription:
          description: A short description for this product. Always returned in Product Configuration object.
          type: string
          example: "SHORT_DESCRIPTION"
          readOnly: true
        expiryDate:
          $ref: '#/components/schemas/ExpiryDate'
        cardMetaData:
          $ref: '#/components/schemas/CardMetaData'

    CryptoGram:
      description: Cryptogram resposne to merchant.
      type: object
      required:
        - cryptogram
        - eci
      properties:
        cryptogram:
          description: The unique cryptogram valid only for a specific transaction.
          type: string
          readOnly: true
          example: "5001a9f027e5629d11e3949a0800a"
        eci:
          description: EC indicator for liability shift.
          type: string
          readOnly: true
          example: "12345"

    ExpiryDate:
      description: Contains account expiration data and needs to either send the values in individual fields OR as a singleValue.
      type: object
      required:
        - month
        - year
      properties:
        month:
          type: string
          description: Month format 'MM'
          pattern: "[0-9]{2,2}"
          minLength: 2
          maxLength: 2
          example: "09"
        year:
          type: string
          description: Year format 'YY'
          pattern: "[0-9]{2,2}"
          minLength: 2
          maxLength: 2
          example: "20"

    NVP:
      title: Name and Value pair.
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        valueAsList:
          type: array
          minItems: 0
          items:
            type: string

    TokenInfo:
      description: Information related to network Tokens and reference Ids.
      type: object
      readOnly: true
      required:
        - token
      properties:
        decision:
          $ref: '#/components/schemas/TokenStatus'
        token:
          $ref: '#/components/schemas/Token'

    Token:
      description: Network Tokens Information.
      type: object
      readOnly: true
      properties:
        tokenReferenceId:
          description: A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime.
          type: string
          example: "5001a9f027e5629d11e3949a0800a"
          readOnly: true
        expiryDate:
          $ref: '#/components/schemas/ExpiryDate'
        alias:
          description: Last four values of the token
          type: string
          example: "1111"
          readOnly: true
        paymentAccountReferenceId:
          description: The unique account reference assigned to the PAN. Conditionally returned if the Token Requestor has opted to receive PAR and providing PAR is assigned by networks or the Issuer provides PAR in the authorization message response.
          type: string
          readOnly: true
          example: "5001a9f027e5629d11e3949a0800a"
        tokenRequestorId:
          description: Unique ID that identifies the entity for which the token request is being conducted.
          type: string
          maximum: 11
          readOnly: true
          example: "2901"
        fiservTokenRequestorId:
          description: Unique ID mapes to tokenRequestorId. Unique per merchant.
          type: string
          maximum: 11
          readOnly: true
          example: "MSTF-2901"
        paymentToken:
          description: The Token for a PAN. This should be used for auth.
          type: string
          readOnly: true
          example: "5001a9f027e5629d11e3949a0800a"
        provisionTokenId:
          description: This will be returned only for VISA tokenization.
          type: string
          readOnly: true
          example: "6001a9f027e5629d11e3949a0800a"
        panSequenceNumber:
          type: string
          maxLength: 4
          description: 'Pan sequence number for Auth.'
          readOnly: true
          example: '00'
        track2Equivalent:
          type: string
          maxLength: 256
          description: 'Information such as the Expiration Date, Primary Account Number, etc. encoded on Track 2 magnetic stripe.'
          readOnly: true
          example: '5204736200176909D25041000000000000000F'

    UpdateReason:
      description: Information related to network Tokens
      type: object
      required:
        - causedBy
        - reasonCode
      properties:
        causedBy:
          $ref: '#/components/schemas/CausedBy'
        reasonCode:
          $ref: '#/components/schemas/ReasonCode'
        reason:
          description: Free form reason why the Tokens are being suspended.
          type: string
          example: "Lost/stolen device"

    MediaContents:
      description: Provision card information.
      type: object
      required:
        - mimeType
        - data
        - height
        - width
      properties:
        mimeType:
          description: Specified as a MIME type, which will be one of the following supported types application/pdf (for images must be a vector PDF image) image/png (includes alpha channel) text/plain text/html
          type: string
          example: "text/plain"
        data:
          description: The data for this item of media. Base64-encoded data, given in the format as specified in 'type'.
          type: string
          example: "encrypted_data binary"
          readOnly: true
        height:
          description: For image assets, the height of this image. Specified in pixels.
          type: string
          example: "1024"
          readOnly: true
        width:
          description: For image assets, the width of this image. Specified in pixels.
          type: string
          example: "750"
          readOnly: true
    #-------------------------------------
    # Common Models
    #-------------------------------------
    Error:
      description: Model for error messaging
      type: object
      properties:
        code:
          type: string
          description: Uniquely identifies an error condition. Client applications need to read and handle errors based on this.
        message:
          type: string
          description: A generic description of the error condition.
        category:
          type: string
          description: The resource associated with the error condition.
        developerInfo:
          type: object
          description: Information that needs to be understood by the client developers and should not be interpreted for application processing.
          properties:
            developerMessage:
              type: string
              description: An elaborative description of the error description.
            moreInfo:
              type: string
              description: Link to the error in Developer page.
            fieldError:
              description: Detailed information about message format errors.
              type: array
              items:
                properties:
                  field:
                    description: The property or attribute associated with the error
                    type: string
                  message:
                    description: Information specific to a property or attribute.
                    type: string
        hostExtraInfo:
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/NVP'
          uniqueItems: true
      example:
        code: "40000"
        message: "Example Error"
        category: "example"
        developerInfo:
          developerMessage: "Invalid Message format in request payload"
          moreInfo: "https://www.example.com/errors/40000"
          fieldError:
            - field: "example id"
              message: "exampleId is mandatory"

    #-------------------------------------
    # ENUM Models
    #-------------------------------------
    TokenStatus:
      description: Indicates the status of a token.
      type: string
      readOnly: true
      enum:
        - ACTIVE
        - INACTIVE
        - SUSPENDED
        - DEACTIVATED
        - DECLINED
        - APPROVED
        - DELETED

    Operation:
      description: Indicates the type of operation to be performed. Applicable values are defined below.
      type: string
      enum:
        - SUSPEND
        - RESUME
        - DELETE
        - REISSUE
        - UPDATE

    CardBrand:
      description: A reference id provided to merchant in the response. This is to identify source of tokenReferenceId. Probable values are define as enum.
      type: string
      enum:
        - VI
        - AX
        - DI
        - MC
        - RU

    CausedBy:
      description: Who or what caused the Token to be suspended. Must be either the 'CARDHOLDER' (operation requested by the Cardholder) or 'TOKEN_REQUESTOR' (operation requested by the token requestor).
      type: string
      enum:
        - CARDHOLDER
        - TOKEN_REQUESTOR

    ReasonCode:
      description: The reason for the action to be suspended. Must be one of 'SUSPECTED_FRAUD' (suspected fraudulent token transactions), 'OTHER' (Other - default used if value not provided).
      type: string
      enum:
        - FRAUD
        - CUSTOMER_CONFIRMED
        - OTHER

    TransactionType:
      description: ECOM-e-commercetransactiontype.Tobe used with web flows.RECURRING-Recurringpayment. If not provided in request, default value will be ECOM
      type: string
      writeOnly: true
      enum:
        - ECOM
        - RECURRING

    PanSource:
      description: Source of the payment instrument (PAN). This enum value specifies the source and the method used to provide the payment instrument data. If not provided in request, default value will be CARD_ON_FILE
      type: string
      writeOnly: true
      enum:
        - CARD_ON_FILE
        - CARD_ADDED_MANUALLY
        - ISSUER_PUSH_PROVISION
        - TOKEN_FOR_TOKEN
        - CARD_ADDED_VIA_APPLICATION
        - BATCH


    EventType:
      description: The notification webhook API is to send two different type of notifications.If eventType is TOKEN_LIFECYCLE_EVENT, Merchant should use tokenRequestorId to correlate the system of record. If eventType is PROVISION_TOKEN_EVENT, merchant should user provisionRequestId to correlate the system of record.
      type: string
      enum:
        - PROVISION_TOKEN_EVENT
        - TOKEN_LIFECYCLE_EVENT
        - PAN_UPDATE_EVENT

    Status:
      description: Status of the token & associated PAN.
      type: string
      enum:
        - CARD_UPDATE_INPROGRESS
        - CARD_UP_TO_DATE
        - CARD_UPDATE_ERROR
        - TOKENIZATION_INPROGRESS
        - TOKENIZATION_COMPLETED
        - TOKENIZATION_ERROR
        - DUPLICATE_REQUEST
    #-------------------------------------
    # response Models
    #-------------------------------------
    NoContent:
      description: The request succeeded but there’s really nothing to show.


    Unauthorized:
      description: Unauthorized
  #-------------------------------------
  # response Models
  #-------------------------------------
  examples:
    ProvisionTokenRequest:
      value:
        provision:
          card:
            cardNumber: 'enc_pan_string'
            expiryDate:
              month: 'mm'
              year: 'yy'
        cardBrand: VI

    ProvisionQueueResponse:
      value:
        clientRequestId: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
        provisionRequestId: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
        cardBrand: 'VI'
        createdDate: '2021-09-28T09:07:44.716+00:00'

    UpdateTokenRequest:
      value:
        operation: SUSPEND
        updateReason:
          causedBy: CARDHOLDER
          reasonCode: FRAUD
          reason: Lost/stolen device
        cardBrand: VI

    GetTokenResponse:
      value:
        provision:
          card:
            alias: '3022'
            cardBrandLogoAssetId: 3789637f-32a1-4810-a138-4bf34501c509
            cardBrandDescription: Test Bank for MasterCard MTF
            expiryDate:
              month: 'mm'
              year: 'yy'
          tokenInfo:
            decision: ACTIVE
            token:
              tokenReferenceId: DM4MMC0000144136091f82a8661f43d2807309c7137182fa
              expiryDate:
                month: 'mm'
                year: 'yy'
              alias: '3689'
              paymentAccountReferenceId: 50018GN89CJ4LN90WXSPR34G63V14
              paymentToken: 'payment_token_string'
        cardBrand: MC

    CryptoGramRequest:
      value:
        transactionType: ECOM
        cardBrand: MC

    CryptoGramResponse:
      value:
        token:
          fiservTokenRequestorId: AAA008UU
          expiryDate:
            month: 'mm'
            year: 'yy'
            date: 'dd'
          tokenRequestorId: 'trid_string'
          paymentToken: 'payment_token_string'
          panSequenceNumber: '00'
          track2Equivalent: 5204736200176909D25041000000000000000F
        crypto:
          cryptogram: AEPGgQPZEAuxAAguh73NAAADFA==

    GetAssetResponse:
      value:
        mediaContents:
          mimeType: image/png
          data: base64_encoded_string
          height: '283'
          width: '458'


    LifeCycleNotificationRequest:
      value:
        notification:
          cardBrand: MC
          card:
            alias: '3393'
            cardBrandLogoAssetId: 8f469eb8-4c32-489d-b683-1c3e20a88905
            cardBrandDescription: Test Bank 2
            expiryDate:
              month: 'mm'
              year: 'yy'
          token:
            tokenReferenceId: DM4MMC0000144136b51d204d52ec4d8eac548a9d686a65f9
            expiryDate:
              month: 'mm'
              year: 'yy'
            alias: '0173'
            tokenRequestorId: 'trid_string'
            fiservTokenRequestorId: AAA007VV
            tokenStatus: SUSPENDED
          eventType: TOKEN_LIFECYCLE_EVENT

    ProvisionNotificationRequest:
      value:
        notification:
          cardBrand: VI
          card:
            alias: '2341'
            expiryDate:
              month: 'mm'
              year: 'yy'
          token:
            tokenReferenceId: DNITHE302210369115657551
            expiryDate:
              month: 'mm'
              year: 'yy'
            alias: '3731'
            tokenRequestorId: 'trid_string'
            fiservTokenRequestorId: AAA001XX
            paymentToken: 'enc_payment_token_string'
            paymentAccountReferenceId: 'enc_par_string'
            tokenStatus: ACTIVE
            provisionTokenId: 69dc97d4555dd16ad8041cb8fc4eea01
          transactionInfo:
            clientRequestId: e67e776e-f288-4c4d-819e-9ea0e0a794f7
            provisionRequestId: 8a7fc6c98cef0334018cef50c3480001
          eventType: PROVISION_TOKEN_EVENT

    ErrorNotificationRequest:
      value:
        error:
          code: '400002'
          message: Ineligible PAN for tokenization
          category: common
          developerInfo:
            fieldError:
              - field: declined
                message: Further operations for this card are no longer allowed. Contact the issuer to resolve the issue.
          hostExtraInfo: []
        transactionInfo:
          clientRequestId: 74277863-0400-47de-aa2d-cbc3262c5b13
          provisionRequestId: 8a7f87f68cef0334018cef506da80002
        eventType: PROVISION_TOKEN_EVENT

    PanUpdateNotification:
      value:
        eventType: PAN_UPDATE_EVENT
        tokenReferenceId: DNITHE302210369115657551

    PanUpdateNotificationError:
      value:
        eventType: PAN_UPDATE_EVENT
        tokenReferenceId: DNITHE302210369115657551
        message: "PAN update error."

    GetCardResponse:
      value:
        card:
          cardNumber: 'base64_encoded_enc_pan_string'
          expiryDate:
            month: 'mm'
            year: 'yy'
        token:
          tokenReferenceId: "8a7f87f68cef0334018cef506da80002"
        cardBrand: VI
        status: "CARD_UPDATE_INPROGRESS"

    GetPanResponseError:
      value:
        token:
          tokenReferenceId: "8a7f87f68cef0334018cef506da80002"
        cardBrand: VI
        status: "CARD_UPDATE_ERROR"
        message: "PAN update error."

    GetCardResponseNoCardInfo:
      value:
        token:
          tokenReferenceId: "8a7f87f68cef0334018cef506da80002"
        cardBrand: VI
        status: "CARD_UP_TO_DATE"

    ProvisionQueueStatusInProgressResponse:
      value:
        status: "TOKENIZATION_INPROGRESS"

    ProvisionQueueStatusSuccessResponse:
      value:
        status: "TOKENIZATION_COMPLETED"
        tokenReferenceId: "8a7f87f68cef0334018cef506da80002"

    KeysResponse:
      value:
        keyId: 0356161b-74f2-4378-90c6-9267ac3e4f20
        status: ACTIVE
        expireDate: '2024-02-01T10:46:14.087458148'
        publicKey: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkQgpdsPDqkYxyQ92tCUnPviR6OOkIyBVtDrXu8VexYIXEx4g0HaVfFUPnNfPpnfBqg8X5HTwGm/cP5MVDr6kPtnuaFsXH9i7dIRRDpLedI7kH6L4Uts7BBHPeBgcEWY7Ns19td9P8XtKZZVBo3zp+u32O3mOQhDjIJYJWBTLotQiAL47E69LW3Zhb6jETbnTj9AMyNc0GoCm5GZ29J9NX4YyEZcLF7ZyDdENp7Q9Fh2uu1mw3LOYu7WgAIpjp36prfI4YOrChXeWgh2XIClJqHgmefhpjBgRYS0diFFLhwooij+moAHwlq7bXs/jdM3bQ8WdH7OLYptBKQ+6/fqR1QIDAQAB