openapi: 3.0.3
info: {
  title: API Explorer,
  description: This Specification document lists the APIs required for provision a token for a PAN getting Cryptogram for a token and Lifecycle management for the provisioned token.,
  version: 1.0.0
}
servers:
  - { url: 'https://api.fiservapps.com/mtrg/v1/{resource}', description: Production }
  - { url: 'https:// cert.api.fiservapps.com/mtrg/v1/{resource}', description: Cert Sandbox }
  - { url: 'https:// qa.api.fiservapps.com/mtrg/v1/{resource}', description: QA Sandbox }
paths:
  /trids/{id}/queue-tokens:
    x-model-version: 1.0
    post:
      tags: [ TEST Queue Token Endpoint Definition ]
      x-group-name: Queue Token
      x-proxy-name: queue-tokens
      summary: Queue a provision token request.
      description: This API is to queue a provision token request for a PAN. It's asynch way of tokenization the PAN through different networks like VISA, MASTERCARD, DISCOVER, AMEX.
      parameters:
        - {$ref: '#/components/parameters/TRIDParam'}
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/AcceptLanguageHeader'}
        - {$ref: '#/components/parameters/ClientRequestIdHeader'}
        - {$ref: '#/components/parameters/XCardBrandHeader'}
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProvisionTokenRequest' }
      responses:
        201:
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProvisionQueueResponse' }
        400: { $ref: '#/components/responses/BadRequest' }
        401: { $ref: '#/components/responses/Unauthorized' }
        404: { $ref: '#/components/responses/NotFound' }
        408: { $ref: '#/components/responses/RequestTimeout' }
        415: { $ref: '#/components/responses/UnsupportedMediaType' }
        429: { $ref: '#/components/responses/TooManyRequest' }
        500: { $ref: '#/components/responses/ServerError' }
        503: { $ref: '#/components/responses/ServiceUnavailable' }
        504: { $ref: '#/components/responses/GatewayTimeout' }


components:
  parameters:
    TRIDParam:
      x-model-version: 1.0
      name: id
      schema: {type: string}
      in: path
      required: true
      description: Use this to perform secondary transaction, received from primary
        auth or sale.
    AuthorizationHeader:
      x-model-version: 1.0
      name: Authorization
      schema: {type: string}
      in: header
      required: true
      description: Authorization header used to ensure the request has not been tampered
        with during transmission. Valid encryption; HMAC, JWT, or AccessToken. For
        more information, refer to the supporting documentation on the Developer Portal.
    AcceptLanguageHeader:
      x-model-version: 1.0
      name: Accept-Language
      schema: {type: string}
      in: header
      required: false
      description: The Accept Language header contains information about the language
        preference of a user. This HTTP header is useful to multilingual sites for
        deciding the best language to serve to the client. For example en-US or fr-CA.
    ContentTypeHeader:
      x-model-version: 1.0
      name: Content-Type
      schema:
        type: string
        enum: [application/json]
        default: application/json
      in: header
      required: true
      description: The content type. Valid value (application/json).
    ClientRequestIdHeader:
      x-model-version: 1.0
      name: Client-Request-Id
      schema: {type: string}
      in: header
      required: true
      description: A client-generated ID for request tracking and signature creation,
        unique per request. This is also used for idempotency control. Recommended
        128-bit UUID format.
    TimestampHeader:
      x-model-version: 1.0
      name: Timestamp
      schema: {type: integer, format: int64}
      in: header
      required: true
      description: Epoch timestamp in milliseconds in the request from a client system.
        Used for authorization header generation and time limit (5 minutes).
    ApiKeyHeader:
      x-model-version: 1.0
      name: Api-Key
      schema: {type: string}
      in: header
      required: true
      description: API key provided to the merchant associating the requests with
        the appropriate app in the Developer Portal.
    XCardBrandHeader:
      x-model-version: 1.0
      name: X-Card-Brand
      schema: {type: string}
      in: header
      required: true
      description: API key provided to the merchant associating the requests with
        the appropriate app in the Developer Portal.

  responses:
    BadRequest:
      x-model-version: 1.0
      description: The request cannot be validated.
      content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}
          example:
            error:
              - {
                code: "400003",
                message: "Example Error",
                category: "Bad Request",
                developerInfo: {
                  developerMessage: "Invalid Message format in request payload",
                  fieldError: {
                    field: "PAN",
                    message: "PAN number is mandatory."
                  }
                },
                hostExtraInfo: [{
                  name: 10009,
                  value: "Invalid PAN"
                }]
              }

    Unauthorized:
      x-model-version: 1.0
      description: The request was unauthorized.

    NotFound:
      x-model-version: 1.0
      description: The requested resource does not exist.
      content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}
          example:
            error:
              - {
                code: "400004",
                message: "Invalid Message format in request payload",
                category: "Not Found",
                developerInfo: {
                  developerMessage: "Invalid Message format in request payload",
                  fieldError: {
                    field: "id",
                    message: "Id is mandatory"
                  }
                }
              }

    RequestTimeout:
      x-model-version: 1.0
      description: The request was timed out due to not receiving the request in time.
      content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}
          example:
            error:
              - {
                code: "400004",
                message: "The connection has timeout between the systems.",
                category: "Not Found",
                developerInfo: {
                  developerMessage: "Invalid Message format in request payload",
                  fieldError: {
                    field: "id",
                    message: "Id is mandatory"
                  }
                }
              }

    UnsupportedMediaType:
      x-model-version: 1.0
      description: The media type is not supported.
      content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}
          example:
            error:
              - {
                code: "400005",
                message: "Unsupported media type",
                category: "Unsupported media type"
              }

    TooManyRequest:
      x-model-version: 1.0
      description: Too many request were sent.
      content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}
          example:
            error:
              - {
                code: "400006",
                message: "Too many request were sent.",
                category: "TooMany Request",
                developerInfo: {
                  developerMessage: "Too many request were sent."
                }
              }

    ServerError:
      x-model-version: 1.0
      description: An unexpected internal server error occurred.
      content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}
          example:
            error:
              - {
                code: "400007",
                message: "Not able to send request to backend",
                category: "Server Error",
                developerInfo: {
                  developerMessage: "Not able to send request to backend",
                }
              }

    ServiceUnavailable:
      x-model-version: 1.0
      description: The service was unavailable.
      content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}
          example:
            error:
              - {
                code: "400007",
                message: "Service Unavailable",
                category: "Server Error",
                developerInfo: {
                  developerMessage: "Service Unavailable",
                }
              }

    GatewayTimeout:
      x-model-version: 1.0
      description: The request timed out while waiting for a response.
      content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}
          example:
            error:
              - {
                code: "400007",
                message: "The request timed out while waiting for the
                  response.",
                category: "Gateway Timeout",
                developerInfo: {
                  developerMessage: "Service Unavailable",
                }
              }
  schemas:
    Error:
      x-model-version: 1.0
      description: Error information.
      type: object
      properties:
        code: { type: string, description: Uniquely identifies an error condition. Client applications need to read and handle errors based on this., example: 400001}
        message: { type: string, description: A generic description of the error condition., example: Missing type ID property.}
        category: {type: string,  description: The resource associated with the error condition., example: Tokenization Error}
        developerInfo:
          $ref: '#/components/schemas/DeveloperInfo'
        hostExtraInfo:
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/NVP'
          uniqueItems: true

    DeveloperInfo:
      x-model-version: 1.0
      type: object
      description: Information that needs to be understood by the client developers and should not be interpreted for application processing.
      properties:
        developerMessage: { type: string, description: An elaborative description of the error description., example: Invalid Message format in request payload.}
        moreInfo: { type: string, description: Link to the error in Developer page., example: "https://www.example.com/errors/40000"}
        fieldError:
          description: Detailed information about message format errors.
          type: array
          items:
            $ref: '#/components/schemas/FieldError'

    FieldError:
      x-model-version: 1.0
      description: Detailed information about message format errors.
      type: array
      items:
        properties:
          field: { type: string, description: The property or attribute associated with the error, example: example id}
          message: {type: string, description: Information specific to a property or attribute.,
                    example: exampleId is mandatory}

    NVP:
      x-model-version: 1.0
      description: Name and Value pair.
      type: object
      properties:
        name: { type: string, description: name of the attribute}
        value: { type: string, description: value of the attribute}
        valueAsList:
          type: array
          minItems: 0
          items: { type: string, description: list of items}


    ProvisionTokenRequest:
      x-model-version: 1.0
      description: Provision request object model
      type: object
      required:
        - provision
      properties:
        provision:
          $ref: '#/components/schemas/Provision'
        cardBrand:
          $ref: '#/components/schemas/CardBrand'

    ProvisionQueueResponse:
      title: Provision resposne object model
      type: object
      required:
        - provision
      properties:
        clientRequestId: { description: Request Id provided at the time of API call in the header Client-Request-Id., type: string, example: "2021-09-28T09:07:44.716+00:00"}
        provisionRequestId: { description: Corellation Id generated by the platform after adding request to the queue.,
                              type: string,
                              example: "2021-09-28T09:07:44.716+00:00"}
        cardBrand:
          $ref: '#/components/schemas/CardBrand'
        createdDate: { description: Time in when the request was added into the queue.,
                       type: string,
                       example: "2021-09-28T09:07:44.716+00:00"}

    Provision:
      x-model-version: 1.0
      description: Provision card information.
      type: object
      required:
        - card
        - cryptoRequired
      properties:
        card:
          $ref: '#/components/schemas/Card'
        panSource:
          $ref: '#/components/schemas/PanSource'
        tokenInfo:
          $ref: '#/components/schemas/TokenInfo'
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        cryptogramRequired:
          $ref: '#/components/schemas/CryptoGramRequired'
        merchantInfo:
          $ref: '#/components/schemas/MerchantInfo'
        customerInfo:
          $ref: '#/components/schemas/CustomerInfo'
        authorizationInfo:
          $ref: '#/components/schemas/AuthorizationInfo'

    CryptoGramRequired:
      description: Unique ID mapes to tokenRequestorId. Unique per merchant.
      type: string
      maximum: 11
      readOnly: true
      example: "MSTF-2901"

    MerchantInfo:
      description: Information about merchant - Required only for Rupay.
      type: object
      writeOnly: true
      required:
        - merchantId
        - merchantName
      properties:
        merchantId:
          description: Unique Id provided by frontend(north/south/memphis/oma) for a merchant at the time of boarding .
          type: string
          example: "54234509"
          maximum: 36
        merchantName:
          description: Name provided by the merchant at the time of boarding - Doing Business As.
          type: string
          example: "Microsoft LLC."
          maximum: 45

    CustomerInfo:
      description: Information about customer - Required Only for Rupay.
      type: object
      writeOnly: true
      required:
        - consumerId
      properties:
        consumerId:
          description: Unique profile Id associated with each customer.
          type: string
          example: "2d8a1360a24841e1a5677"
          maximum: 64

    AuthorizationInfo:
      description: Information about Auth transaction - Required Only for Rupay.
      type: object
      writeOnly: true
      required:
        - authRefNo
      properties:
        authRefNo:
          description: Unique Auth Id for the transaction created before tokenization.
          type: string
          example: "2d8a1360a24841e1a5677"
          maximum: 36

    Card:
      description: Information on a credit account
      type: object
      required:
        - cardNumber
        - cardType
        - expiryDate
      properties:
        cardNumber:
          description: Primary account number, can only be sent when vaulting an account.  This field will NOT be present in responses.
          type: string
          example: "4111111111111111"
          writeOnly: true
        alias:
          description: Last four values of the cardNumber
          type: string
          readOnly: true
          example: "4567"
        cardBrandLogoAssetId:
          description: Asset associated with Card.
          type: string
          example: "SOME_RANDOM_ID"
          readOnly: true
        cardBrandDescription:
          description: A short description for this product. Always returned in Product Configuration object.
          type: string
          example: "SHORT_DESCRIPTION"
          readOnly: true
        expiryDate:
          $ref: '#/components/schemas/ExpiryDate'

    CryptoGram:
      description: Cryptogram resposne to merchant.
      type: object
      required:
        - cryptogram
        - eci
      properties:
        cryptogram:
          description: The unique cryptogram valid only for a specific transaction.
          type: string
          readOnly: true
          example: "5001a9f027e5629d11e3949a0800a"
        eci:
          description: EC indicator for liability shift.
          type: string
          readOnly: true
          example: "12345"

    ExpiryDate:
      description: Contains account expiration data and needs to either send the values in individual fields OR as a singleValue.
      type: object
      required:
        - month
        - year
      properties:
        month:
          type: string
          description: Month format 'MM'
          pattern: "[0-9]{2,2}"
          minLength: 2
          maxLength: 2
          example: "09"
        year:
          type: string
          description: Year format 'YY'
          pattern: "[0-9]{2,2}"
          minLength: 2
          maxLength: 2
          example: "20"

    TokenInfo:
      description: Information related to network Tokens and reference Ids.
      type: object
      readOnly: true
      required:
        - token
      properties:
        decision:
          $ref: '#/components/schemas/TokenStatus'
        token:
          $ref: '#/components/schemas/Token'

    Token:
      description: Information related to network Tokens
      type: object
      readOnly: true
      properties:
        tokenReferenceId:
          description: A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime.
          type: string
          example: "5001a9f027e5629d11e3949a0800a"
          readOnly: true
        expiryDate:
          $ref: '#/components/schemas/ExpiryDate'
        alias:
          description: Last four values of the token
          type: string
          example: "1111"
          readOnly: true
        paymentAccountReferenceId:
          description: The unique account reference assigned to the PAN. Conditionally returned if the Token Requestor has opted to receive PAR and providing PAR is assigned by netwroks or the Issuer provides PAR in the authorization message response.
          type: string
          readOnly: true
          example: "5001a9f027e5629d11e3949a0800a"
        tokenRequestorId:
          description: Unique ID that identifies the entity for which the token request is being conducted.
          type: string
          maximum: 11
          readOnly: true
          example: "2901"
        fiservTokenRequestorId:
          description: Unique ID mapes to tokenRequestorId. Unique per merchant.
          type: string
          maximum: 11
          readOnly: true
          example: "MSTF-2901"
        paymentToken:
          description: The Token for a PAN. This should be used for auth.
          type: string
          readOnly: true
          example: "5001a9f027e5629d11e3949a0800a"
        pushAccountReceipt:
          description: This attribute is used only in case of push provisioning used case. The value of the attribute should be provided in case of PAN details.
          type: string
          readOnly: true
          example: "6001a9f027e5629d11e3949a0800a"
        provisionTokenId:
          description: This will be returned only for VISA tokenization.
          type: string
          readOnly: true
          example: "6001a9f027e5629d11e3949a0800a"

    UpdateReason:
      description: Information related to network Tokens
      type: object
      required:
        - causedBy
        - reasonCode
      properties:
        causedBy:
          $ref: '#/components/schemas/CausedBy'
        reasonCode:
          $ref: '#/components/schemas/ReasonCode'
        reason:
          description: Free form reason why the Tokens are being suspended.
          type: string
          example: "Lost/stolen device"
          writeOnly: true


    TokenStatus:
      description: Indicates the status of an token.
      type: string
      readOnly: true
      enum:
        - ACTIVE
        - INACTIVE
        - SUSPENDED
        - DEACTIVATED
        - DECLINED
        - APPROVED

    Operation:
      description: Indicates the type of operation to be performed. Applicable values are defined belo.
      type: string
      writeOnly: true
      enum:
        - SUSPEND
        - RESUME
        - DELETE
        - REISSUE
        - UPDATE

    CardBrand:
      description: A reference id provided to merchant in the response. This is to identtify source of tokenReferenceId. probabile values are define as enum.
      type: string
      enum:
        - VI
        - AX
        - DI
        - MC
        - RU

    CausedBy:
      description: Who or what caused the Token to be suspended. Must be either the 'CARDHOLDER' (operation requested by the Cardholder) or 'TOKEN_REQUESTOR' (operation requested by the token requestor).
      type: string
      enum:
        - CARDHOLDER
        - TOKEN_REQUESTOR

    ReasonCode:
      description: The reason for the action to be suspended. Must be one of 'SUSPECTED_FRAUD' (suspected fraudulent token transactions), 'OTHER' (Other - default used if value not provided).
      type: string
      enum:
        - FRAUD
        - CUSTOMER_CONFIRMED
        - OTHER

    TransactionType:
      description: ECOM-e-commercetransactiontype.Tobe used with web flows.RECURRING-Recurringpayment. If not provided in request, default value will be ECOM
      type: string
      writeOnly: true
      enum:
        - ECOM
        - RECURRING

    PanSource:
      description: Source of the payment instrument (PAN). This enum value specifies the source and the method used to provide the payment instrument data. If not provided in request, default value will be CARD_ON_FILE
      type: string
      writeOnly: true
      enum:
        - CARD_ON_FILE
        - CARD_ADDED_MANUALLY
        - ISSUER_PUSH_PROVISION
        - TOKEN_FOR_TOKEN
        - CARD_ADDED_VIA_APPLICATION
        - BATCH
