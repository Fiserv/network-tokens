openapi: 3.0.3
info: { title: API Explorer, description: This Specification document lists the APIs required for provision a token for a PAN getting Cryptogram for a token and Lifecycle management for the provisioned token., version: 1.0.0 }
servers:
  - { url: 'https://api.fiservapps.com', description: Production }
  - { url: 'https:// cert.api.fiservapps.com', description: Cert Sandbox }
  - { url: 'https:// qa.api.fiservapps.com', description: QA Sandbox }
paths:
  /network-tokens/v1/tokens:
    x-model-version: 1.0
    post:
      tags:
        - Tokenization Endpoint Definition
      x-group-name: Network Tokens
      x-proxy-name: Tokenization
      summary: Provision a token for a PAN request.
      description: This API provisions token for a PAN with different networks - Visa, Mastercard, Amex, Discover.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisionRequest'
            examples:
              PaymentCardProvision:
                summary: PaymentCard to Network Token
                $ref: '#/components/examples/PaymentCardProvisionRequest'
              PaymentTokenProvision:
                summary: TransArmor to Network Token
                $ref: '#/components/examples/PaymentTokenProvisionRequest'

      responses:
        201:
          description: Token request saved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionResponse'
              examples:
                ProvisionQueueResponse:
                  summary: Tokenization aSynch Response
                  $ref: '#/components/examples/ProvisionQueueResponse'
                ProvisionTokenResponse:
                  summary: Tokenization Token Response
                  $ref: '#/components/examples/ProvisionTokenResponse'
                ProvisionTAResponse:
                  summary: TA Token Response
                  $ref: '#/components/examples/ProvisionTAResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        408:
          $ref: '#/components/responses/RequestTimeout'
        415:
          $ref: '#/components/responses/UnsupportedMediaType'
        425:
          $ref: '#/components/responses/TooEarly'
        429:
          $ref: '#/components/responses/TooManyRequest'
        500:
          $ref: '#/components/responses/ServerError'
        503:
          $ref: '#/components/responses/ServiceUnavailable'
        504:
          $ref: '#/components/responses/GatewayTimeout'

  /network-tokens/v1/tokens/{provisionRequestId}/status:
    x-model-version: 1.0
    get:
      tags: [ Tokenization Status ]
      x-group-name: Network Tokens
      x-proxy-name: NetwrokTokenizationStaus
      summary: Get Status of a aSych provision request.
      description: Provides the status of aSych provision request. Returns token reference Id if tokenization is successfull.
      parameters:
        - { $ref: '#/components/parameters/ContentTypeHeader' }
        - { $ref: '#/components/parameters/AcceptLanguageHeader' }
        - { $ref: '#/components/parameters/ClientRequestIdHeader' }
        - { $ref: '#/components/parameters/XCardBrandHeader' }
        - { $ref: '#/components/parameters/ProvisionRequestId' }
      responses:
        200:
          description: Token status retrived successfully.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StatusResponse' }
              examples:
                AsynchToken: { $ref: '#/components/examples/StatusMockResponse' }
        400: { $ref: '#/components/responses/BadRequest' }
        401: { $ref: '#/components/responses/Unauthorized' }
        404: { $ref: '#/components/responses/NotFound' }
        500: { $ref: '#/components/responses/ServerError' }
        503: { $ref: '#/components/responses/ServiceUnavailable' }
        504: { $ref: '#/components/responses/GatewayTimeout' }

  /network-tokens/v1/tokens/{tokenReferenceId}:
    patch:
      tags: [ Lifecycle  ]
      x-group-name: Network Tokens
      x-proxy-name: TokenState
      summary: Merchant initiated lifecycle
      description: This API is to temporarily chnage the status of the token -  ACTIVE, SUSPEND, UNSUSPEND, DELETE are the lifecycle status by the Merchant.
      parameters:
        - { $ref: '#/components/parameters/ContentTypeHeader' }
        - { $ref: '#/components/parameters/AcceptLanguageHeader' }
        - { $ref: '#/components/parameters/ClientRequestIdHeader' }
        - { $ref: '#/components/parameters/XCardBrandHeader' }
        - { $ref: '#/components/parameters/TokenReferenceId' }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateTokenRequest' }
            examples:
              LifeCycle: { $ref: '#/components/examples/UpdateTokenMockRequest' }
      responses:
        204:
          description: Token status updated successfully.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NoContent' }
              examples:
                LifeCycle: { $ref: '#/components/examples/NoContent' }
        400: { $ref: '#/components/responses/BadRequest' }
        401: { $ref: '#/components/responses/Unauthorized' }
        404: { $ref: '#/components/responses/NotFound' }
        500: { $ref: '#/components/responses/ServerError' }
        503: { $ref: '#/components/responses/ServiceUnavailable' }
        504: { $ref: '#/components/responses/GatewayTimeout' }

    get:
      tags: [ Token Lookup ]
      x-group-name: Network Tokens
      x-proxy-name: TokenDetail
      summary: Retrieve information about a token.
      description: Retrieve information about a token using token reference Id
      parameters:
        - { $ref: '#/components/parameters/ContentTypeHeader' }
        - { $ref: '#/components/parameters/AcceptLanguageHeader' }
        - { $ref: '#/components/parameters/ClientRequestIdHeader' }
        - { $ref: '#/components/parameters/XCardBrandHeader' }
        - { $ref: '#/components/parameters/TokenReferenceId' }

      responses:
        200:
          description: Token detail retrived successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProvisionTokenResponse' }
              examples:
                GetToken: { $ref: '#/components/examples/TokenizationMockResponse' }
        400: { $ref: '#/components/responses/BadRequest' }
        401: { $ref: '#/components/responses/Unauthorized' }
        404: { $ref: '#/components/responses/NotFound' }
        500: { $ref: '#/components/responses/ServerError' }
        503: { $ref: '#/components/responses/ServiceUnavailable' }
        504: { $ref: '#/components/responses/GatewayTimeout' }

  /network-tokens/v1/tokens/{tokenReferenceId}/assets/{cardBrandLogoAssetId}:
    get:
      tags: [ Asset ]
      x-group-name: Network Tokens
      x-proxy-name: Asset
      summary: Retrieve details about token asset, card band logo.
      description: Retrieve details about token asset, card band logo. Use the asset Id provided in tokenization webhook.
      parameters:
        - { $ref: '#/components/parameters/ContentTypeHeader' }
        - { $ref: '#/components/parameters/AcceptLanguageHeader' }
        - { $ref: '#/components/parameters/ClientRequestIdHeader' }
        - { $ref: '#/components/parameters/XCardBrandHeader' }
        - { $ref: '#/components/parameters/TokenReferenceId' }
        - { $ref: '#/components/parameters/CardBrandLogoAssetId' }

      responses:
        200:
          description: Card art retrived successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GetAssetResponse' }
              examples:
                Getasset: { $ref: '#/components/examples/GetAssetMockResponse' }
        400: { $ref: '#/components/responses/BadRequest' }
        401: { $ref: '#/components/responses/Unauthorized' }
        404: { $ref: '#/components/responses/NotFound' }
        500: { $ref: '#/components/responses/ServerError' }
        503: { $ref: '#/components/responses/ServiceUnavailable' }
        504: { $ref: '#/components/responses/GatewayTimeout' }

  /network-tokens/v1/tokens/{tokenReferenceId}/cryptogram:
    get:
      tags: [ Cryptogram ]
      x-group-name: Network Tokens
      x-proxy-name: Cryptogram
      summary: Cryptogram request for CIT transactions
      description: This API is to create a Digital Secure Remote Payment transaction cryptogram using the credentials stored within netwrok to perfoem transaction.
      parameters:
        - { $ref: '#/components/parameters/ContentTypeHeader' }
        - { $ref: '#/components/parameters/AcceptLanguageHeader' }
        - { $ref: '#/components/parameters/ClientRequestIdHeader' }
        - { $ref: '#/components/parameters/XCardBrandHeader' }
        - { $ref: '#/components/parameters/TokenReferenceId' }

      responses:
        200:
          description: Generated cryptogram for a token successfully.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CryptoGramResponse' }
              examples:
                GetCryptogram: { $ref: '#/components/examples/CryptogramMockResposne' }
        400: { $ref: '#/components/responses/BadRequest' }
        401: { $ref: '#/components/responses/Unauthorized' }
        404: { $ref: '#/components/responses/NotFound' }
        500: { $ref: '#/components/responses/ServerError' }
        503: { $ref: '#/components/responses/ServiceUnavailable' }
        504: { $ref: '#/components/responses/GatewayTimeout' }

  /network-tokens/v1/notifications/:
    x-model-version: 1.0
    post:
      tags: [ Notification ]
      x-group-name: Network Tokens
      x-proxy-name: Eventnotification
      summary: Send webhook notification to merchant for different Event Type.
      description: Send webhook notification to merchant for different Event Type.Based on Event Type merchant can call /v1/tokens{id} API or /v1/async-tokens/{id} API to get the token details,
      parameters:
        - { $ref: '#/components/parameters/ContentTypeHeader' }
        - { $ref: '#/components/parameters/AcceptLanguageHeader' }
        - { $ref: '#/components/parameters/ClientRequestIdHeader' }

      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/EventNotificationRequest' }
            examples:
              EventNotificationTokensMockRequest: { $ref: '#/components/examples/EventNotificationTokensMockRequest' }

      responses:
        204: { $ref: '#/components/schemas/NoContent' }
        400: { $ref: '#/components/responses/BadRequest' }
        401: { $ref: '#/components/responses/Unauthorized' }
        404: { $ref: '#/components/responses/NotFound' }
        500: { $ref: '#/components/responses/ServerError' }
        503: { $ref: '#/components/responses/ServiceUnavailable' }
        504: { $ref: '#/components/responses/GatewayTimeout' }
##-------------------------------------
## Common Model
##-------------------------------------
components:
  parameters:
    TRIDParam:
      x-model-version: 1.0
      name: id
      schema: { type: string }
      in: path
      required: true
      description: Token Requestor Id generated by Fiserv for a merchant. Unique value per merchant.
      example: "12345"
    TokenReferenceId:
      x-model-version: 1.0
      name: tokenReferenceId
      schema: { type: string }
      in: path
      required: true
      description: Token Reference Id generated by networks for a PAN at the time of tokenization.
      example: "12345"
    ProvisionRequestId:
      x-model-version: 1.0
      name: provisionRequestId
      schema: { type: string }
      in: path
      required: true
      description: Random UUID provided in response to asynch token API call - provisionRequestId.
      example: "12345-oooopp-jjjdooo"
    CardBrandLogoAssetId:
      x-model-version: 1.0
      name: cardBrandLogoAssetId
      schema: { type: string }
      in: path
      required: true
      description: Asset Id provided as part of webhook to merchant.
      example: "12345"
    AuthorizationHeader:
      x-model-version: 1.0
      name: Authorization
      schema: { type: string }
      in: header
      required: true
      description: Authorization header used to ensure the request has not been tampered
        with during transmission. Valid encryption; HMAC, JWT, or AccessToken. For
        more information, refer to the supporting documentation on the Developer Portal.
      example: "HMAC dkf=="
    AcceptLanguageHeader:
      x-model-version: 1.0
      name: Accept-Language
      schema: { type: string, default: application/json}
      in: header
      required: false
      example: "application/json"
      description: The Accept Language header contains information about the language
        preference of a user. This HTTP header is useful to multilingual sites for
        deciding the best language to serve to the client. For example en-US or fr-CA.
    ContentTypeHeader:
      x-model-version: 1.0
      name: Content-Type
      schema:
        type: string
        enum: [ application/json ]
        default: application/json
      in: header
      required: true
      example: "application/json"
      description: The content type. Valid value (application/json).
    ClientRequestIdHeader:
      name: Client-Request-Id
      in: header
      description: A client-generated ID for request tracking and signature creation,
        unique per request. This is also used for idempotency control. Recommended
        128-bit UUID format.
      required: true
      schema:
        type: string
        example: "120011"
    TimestampHeader:
      x-model-version: 1.0
      name: Timestamp
      schema: { type: integer, format: int64 }
      in: header
      required: true
      description: Epoch timestamp in milliseconds in the request from a client system.
        Used for authorization header generation and time limit (5 minutes).
      example: "1649702174157"
    ApiKeyHeader:
      x-model-version: 1.0
      name: Api-Key
      schema: { type: string }
      in: header
      required: true
      description: API key provided to the merchant associating the requests with
        the appropriate app in the Developer Portal.
    XCardBrandHeader:
      name: X-Card-Brand
      in: header
      description: API key provided to the merchant associating the requests with
        the appropriate app in the Developer Portal.
      required: true
      schema:
        type: string
        example: "VI"
  #-------------------------------------
  # Common Models
  #-------------------------------------
  responses:
    BadRequest:
      x-model-version: 1.0
      description: The request cannot be validated.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
          example:
            error:
              - {
                code: "400003",
                message: "Example ErrorResponse",
                category: "Bad Request",
                developerInfo: {
                  developerMessage: "Invalid Message format in request payload",
                  fieldError: {
                    field: "PAN",
                    message: "PAN number is mandatory."
                  }
                },
                hostExtraInfo: [ {
                  name: 10009,
                  value: "Invalid PAN"
                } ]
              }

    Unauthorized:
      x-model-version: 1.0
      description: The request was unauthorized.

    NotFound:
      x-model-version: 1.0
      description: The requested resource does not exist.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
          example:
            error:
              - {
                code: "400004",
                message: "Invalid Message format in request payload",
                category: "Not Found",
                developerInfo: {
                  developerMessage: "Invalid Message format in request payload",
                  fieldError: {
                    field: "id",
                    message: "Id is mandatory"
                  }
                }
              }

    RequestTimeout:
      x-model-version: 1.0
      description: The request was timed out due to not receiving the request in time.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
          example:
            error:
              - {
                code: "400004",
                message: "The connection has timeout between the systems.",
                category: "Not Found",
                developerInfo: {
                  developerMessage: "Invalid Message format in request payload",
                  fieldError: {
                    field: "id",
                    message: "Id is mandatory"
                  }
                }
              }

    UnsupportedMediaType:
      x-model-version: 1.0
      description: The media type is not supported.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
          example:
            error:
              - {
                code: "400005",
                message: "Unsupported media type",
                category: "Unsupported media type"
              }

    TooManyRequest:
      x-model-version: 1.0
      description: Too many request were sent.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
          example:
            error:
              - {
                code: "400006",
                message: "Too many request were sent.",
                category: "TooMany Request",
                developerInfo: {
                  developerMessage: "Too many request were sent."
                }
              }

    ServerError:
      x-model-version: 1.0
      description: An unexpected internal server error occurred.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
          example:
            error:
              - {
                code: "400007",
                message: "Not able to send request to backend",
                category: "Server Error",
                developerInfo: {
                  developerMessage: "Not able to send request to backend",
                }
              }

    ServiceUnavailable:
      x-model-version: 1.0
      description: The service was unavailable.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
          example:
            error:
              - {
                code: "400007",
                message: "Service Unavailable",
                category: "Server Error",
                developerInfo: {
                  developerMessage: "Service Unavailable",
                }
              }

    GatewayTimeout:
      x-model-version: 1.0
      description: The request timed out while waiting for a response.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
          example:
            error:
              - {
                code: "400007",
                message: "The request timed out while waiting for the
                  response.",
                category: "Gateway Timeout",
                developerInfo: {
                  developerMessage: "Service Unavailable",
                }
              }

    TooEarly:
      x-model-version: 1.0
      description: 'The request was sent too early.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            gatewayResponse:
              transactionProcessingDetails:
                apiTraceId: '7027b61dbf7645399d204dbfa0de0870'
                clientRequestId: '9bb0664a21fc48e3a1cef1f067fced3f'
            error:
              - type: 'GATEWAY'
                message: 'The request was sent too early.'
  #-------------------------------------
  # response Models
  #-------------------------------------
  schemas:
    Link:
      description: Model to communicate linked resources. In this scenario, payment url per recipeint should be returned.
      type: object
      required:
        - href
        - method
      properties:
        href:
          description: URL to linked resource.
          type: string
          format: uri
          example: https://cert.fiservapps.com/v1/async-tokens/6001a9f027e5629d11e3949a0800a
        method:
          description: Defines the HTTP method for the given href.
          type: string
          default: "GET"
          example:
            "GET"

    ErrorResponse:
      x-model-version: 1.0
      description: 'Response containing an error object.'
      properties:
        gatewayResponse:
          $ref: '#/components/schemas/GatewayResponse'
        error:
          type: array
          items:
            $ref: '#/components/schemas/Error'

    Error:
      x-model-version: 1.0
      description: Error information.
      type: object
      properties:
        code: { type: string, description: Uniquely identifies an error condition. Client applications need to read and handle errors based on this., example: 400001 }
        message: { type: string, description: A generic description of the error condition., example: Missing type ID property. }
        category: { type: string,  description: The resource associated with the error condition., example: Tokenization Error }
        developerInfo:
          $ref: '#/components/schemas/DeveloperInfo'
        hostExtraInfo:
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/NVP'
          uniqueItems: true

    DeveloperInfo:
      x-model-version: 1.0
      type: object
      description: Information that needs to be understood by the client developers and should not be interpreted for application processing.
      properties:
        developerMessage: { type: string, description: An elaborative description of the error description., example: Invalid Message format in request payload. }
        moreInfo: { type: string, description: Link to the error in Developer page., example: "https://www.example.com/errors/40000" }
        fieldError:
          description: Detailed information about message format errors.
          type: array
          items:
            $ref: '#/components/schemas/FieldError'

    GatewayResponse:
      x-model-version: 1.0
      description: 'Contains the <a href="../docs?path=docs/Resources/Master-Data/Gateway-Response.md">gateway response</a> details.'
      properties:
        transactionType:
          type: string
          maxLength: 256
          description: 'Transaction type performed.'
          example: 'CHARGE'
        transactionState:
          type: string
          maxLength: 256
          description: 'Final state of the transaction.'
          example: 'AUTHORIZED'
        transactionOrigin:
          type: string
          maxLength: 4
          description: 'Transaction origin based on original request.'
          example: 'ECOM'
        ###internal##
        gatewayTransactionId:
          type: string
          description: 'Transaction ID sent back by downstream (internal to Commerce Hub persistence).'
        gatewayName:
          type: string
          description: 'Gateway name sent back by downstream (internal to Commerce Hub persistence).'
        gatewayOrderId:
          type: string
          description: 'Order ID sent back by downstream (internal to Commerce Hub persistence).'
        componentElapsedTime:
          type: array
          items:
            $ref: '#/components/schemas/ComponentElapsedTime'
        ##/internal##
        transactionProcessingDetails:
          $ref: '#/components/schemas/TransactionProcessingDetails'

    TransactionProcessingDetails:
      x-model-version: 1.0
      description: 'Contains the <a href="../docs?path=docs/Resources/Master-Data/Gateway-Response.md#transaction-processing-details">transaction response</a> details.'
      properties:
        orderId:
          type: string
          maxLength: 40
          description: 'Order identifier returned in the parameter orderId from a Charge transaction.'
          example: 'R-3b83fca8-2f9c-4364-86ae-12c91f1fcf16'
        transactionTimestamp:
          type: string
          format: date-time
          description: 'Date and time the transaction occurred in YYYY-MM-DDThh:mm:ssZ format.'
          example: '2016-04-16T16:06:05Z'
        apiTraceId:
          pattern: '^[a-f0-9]{32}$'
          type: string
          maxLength: 32
          description: 'Request identifier in API that can be used to request logs from the support team.'
          example: '1234567a1234567b1234567c1234567d'
        clientRequestId:
          type: string
          maxLength: 64
          description: 'Echoes back the value in the request header for tracking.'
          example: '30dd879c-ee2f-11db-8314-0800200c9a66'
        transactionId:
          type: string
          maxLength: 40
          description: 'Unique identifier for each transaction on the gateway. This value will be populated for the secondary transaction from the path.'
          example: '838916029301'

    ComponentElapsedTime:
      x-model-version: 1.0
      properties:
        apiTraceId:
          pattern: '^[a-f0-9]{32}$'
          type: string
          maxLength: 32
          description: 'Request identifier in API that can be used to request logs from the support team.'
          example: '1234567a1234567b1234567c1234567d'
        clientId:
          type: string
          maxLength: 64
          description: 'Echoes back the value in the request header for tracking.'
          example: '30dd879c-ee2f-11db-8314-0800200c9a66'
          deprecated: true
        clientRequestId:
          type: string
          maxLength: 64
          description: 'Echoes back the value in the request header for tracking.'
          example: '30dd879c-ee2f-11db-8314-0800200c9a66'
        requestTimestamp:
          type: string
          format: date-time
          description: 'Date and time of the request in YYYY-MM-DDThh:mm:ss.SSSXXX format.'
          example: '2016-04-16T16:06:05.000-05:00'
        responseTimestamp:
          type: string
          format: date-time
          description: 'Date and time of the response in YYYY-MM-DDThh:mm:ss.SSSXXX format.'
          example: '2016-04-16T16:06:05.000-05:00'
        elapsedTime:
          type: integer
          format: int32
          description: 'Elapsed time between request and response represented in milliseconds.'
          example: '700'
        component:
          type: string
          description: 'Name of the component sending the time elapsed report.'
          example: 'APIGEE'
        status:
          type: string
          description: 'Status of the transaction.'
          example: 'SUCCESS'
        category:
          type: string
          description: 'Supported values are INTERNAL or EXTERNAL.'
          example: 'INTERNAL'
        sequence:
          type: integer
          format: int32
          description: 'Denotes the exceution sequence and the delegate invoked/to be invoked.'
          example: '2'
    ##/intermediate##

    ProvisionRequest:
      x-model-version: 1.0
      properties:
        source:
          $ref: '#/components/schemas/Source'

    Source:
      x-model-version: 1.0
      description: 'Payment <a href="../docs?path=docs/Resources/Guides/Payment-Sources/Source-Type.md">source</a> details.'
      required:
        - sourceType
      discriminator:
        propertyName: sourceType
      properties:
        sourceType:
          type: string
          maxLength: 256
          description: |+
            Payment source type for a transaction request.

            Valid Values:
            * <a href="../docs?path=docs/Online-Mobile-Digital/Wallets-AltPayments/Apple-Pay/Apple-Pay.md">ApplePay</a>
            * <a href="../docs?path=docs/Resources/Guides/Payment-Sources/Payment-Card.md">PaymentCard</a>
            * <a href="../docs?path=docs/Resources/API-Documents/Payments_VAS/Payment-Token.md">PaymentToken</a>
          example: 'PaymentCard'

    ProvisionResponse:
      x-model-version: 1.0
      properties:
        gatewayResponse:
          $ref: '#/components/schemas/GatewayResponse'
        source:
          $ref: '#/components/schemas/Source'

    PaymentToken:
      x-model-version: 1.0
      allOf:
        - $ref: '#/components/schemas/Source'
        - $ref: '#/components/schemas/Token'
        - type: object
          properties:
            tokenData:
              type: string
              maxLength: 2048
              description: 'Token created from the payment source.'
              example: '1234123412340019'
            PARId:
              type: string
              maxLength: 256
              description: 'Payment Account Reference ID (PARID) for tokens. Ties transactions with multiple payment sources or tokens to a customer.'
            declineDuplicates:
              type: boolean
              description: 'Identifies if a duplicate create token should be rejected when one has already been created for the payment source.'
              example: false
            tokenSource:
              type: string
              maxLength: 256
              description: 'Source for the Token Service Provider (TSP).'
              example: 'TRANSARMOR'
            card:
              $ref: '#/components/schemas/Card'

    Card:
      x-model-version: 1.0
      description: 'Common <a href="../docs?path=docs/Resources/Master-Data/Card.md">card</a> data for a transaction request and response.'
      properties:
        cardData:
          type: string
          maxLength: 256
          description: 'Card number or encrypted data.'
          example: '4005550000000019'
        nameOnCard:
          type: string
          maxLength: 256
          description: 'Cardholder name.'
          example: 'Jane Smith'
        expirationMonth:
          pattern: '^(0[1-9]|1[012])$'
          type: string
          description: '2-digit expiration month.'
          example: '05'
        expirationYear:
          pattern: '^[0-9]{4}$'
          type: string
          maxLength: 4
          description: '4-digit expiration year.'
          example: '2035'
        securityCode:
          type: string
          maxLength: 4
          description: 'Card Security Code (CSC), Card Verification Data (CVD), Card Verification Number (CVN), Card Verification Value (CVV), Card Verification Code (CVC), Verification Code (V-code or V code), or Signature Panel Code (SPC).'
          example: '111'
        securityCodeIndicator:
          type: string
          maxLength: 15
          description: |+
            Indicates how the security code is passed.

            Valid Values:
            * NOT_SUPPORTED (Default)
            * PROVIDED
            * VALUE_ILLEGIBLE
            * NOT_AVAILABLE
          example: 'PROVIDED'
        bin:
          type: string
          maxLength: 8
          description: 'Bank Identification Number (BIN), the initial set of four to six numbers of the Primary Account Number (PAN). The BIN identifies the issuer and Level 2/3 qualifications.'
          example: '400555'
        last4:
          type: string
          maxLength: 4
          description: 'Contains the last four digits of the Primary Account Number (PAN).'
          example: '0019'
        scheme:
          type: string
          maxLength: 256
          description: 'Card brand.'
          example: 'VISA'
        beginningBalance:
          type: number
          maximum: 999999999999999999.999
          description: 'Beginning card balance.'
          example: '1.00'
        endingBalance:
          type: number
          maximum: 999999999999999999.999
          description: 'Ending card balance.'
          example: '0.10'


    Token:
      x-model-version: 1.0
      description: 'Common <a href="../docs?path=docs/Resources/Master-Data/Network-Token.md">NetworkToken</a> request and response data.'
      properties:
        tokenReferenceId:
          type: string
          maxLength: 64
          description: 'A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime.'
          example: '5001a9f027e5629d11e3949a0800a'
        expirationMonth:
          pattern: '^(0[1-9]|1[012])$'
          type: string
          description: '2-digit expiration month.'
          example: '05'
        expirationYear:
          pattern: '^[0-9]{4}$'
          type: string
          maxLength: 4
          description: '4-digit expiration year.'
        last4:
          type: string
          maxLength: 4
          description: 'Contains the last four digits of the Primary Account Number (PAN).'
          example: '0019'
        paymentAccountReferenceId:
          type: string
          maxLength: 64
          description: 'The unique account reference assigned to the PAN. Conditionally returned if the Token Requestor has opted to receive PAR and providing PAR is assigned by networks or the Issuer provides PAR in the authorization message response.'
          example: '5001a9f027e5629d11e3949a0800a'
        tokenRequestorId:
          type: string
          maxLength: 16
          description: 'Unique Id that identifies the entity for which the token request is being conducted.'
          example: '50175692476'
        provisionTokenId:
          type: string
          maxLength: 64
          description: ' This will be returned only for VISA tokenization.'
          example: '46d233d2780ba4480c1f1e6abd4f7002'
        decision:
          type: string
          maxLength: 15
          description: |+
            Indicates the transaction types.

            Valid Values:
            * ACTIVE (Default)
            * SUSPEND
            * DELETE
          example: 'ACTIVE'


    FieldError:
      x-model-version: 1.0
      description: Detailed information about message format errors.
      type: array
      items:
        properties:
          field: { type: string, description: The property or attribute associated with the error, example: example id }
          message: { type: string, description: Information specific to a property or attribute.,
                     example: exampleId is mandatory }

    NVP:
      x-model-version: 1.0
      description: Name and Value pair.
      type: object
      properties:
        name: { type: string, description: name of the attribute }
        value: { type: string, description: value of the attribute }
        valueAsList:
          type: array
          minItems: 0
          items: { type: string, description: list of items }

    ProvisionTokenRequest:
      x-model-version: 1.0
      description: Provision request object model
      type: object
      required:
        - provision
      properties:
        provision:
          $ref: '#/components/schemas/Provision'

    ProvisionTokenResponse:
      x-model-version: 1.0
      description: Provision resposne object model
      type: object
      required:
        - provision
      properties:
        provision:
          $ref: '#/components/schemas/Provision'
        cardBrand:
          $ref: '#/components/schemas/CardBrand'

    ProvisionQueueResponse:
      title: Provision resposne object model
      type: object
      required:
        - clientRequestId
        - provisionRequestId
        - cardBrand
        - createdDate
      properties:
        clientRequestId: { description: Request Id provided at the time of API call in the header Client-Request-Id., type: string, example: "2021-09-28T09:07:44.716+00:00" }
        provisionRequestId: { description: Corellation Id generated by the platform after adding request to the queue.,type: string, example: "2021-09-28T09:07:44.716+00:00" }
        cardBrand:
          $ref: '#/components/schemas/CardBrand'
        createdDate: { description: Time in when the request was added into the queue., type: string,example: "2021-09-28T09:07:44.716+00:00" }

    UpdateTokenRequest:
      x-model-version: 1.0
      description: Update token request object model
      type: object
      required:
        - operation
        - updateReason
      properties:
        operation:
          $ref: '#/components/schemas/Operation'
        updateReason:
          $ref: '#/components/schemas/UpdateReason'

    UpdateReason:
      x-model-version: 1.0
      description: Information related to network Tokens
      type: object
      required:
        - causedBy
        - reasonCode
      properties:
        causedBy:
          $ref: '#/components/schemas/CausedBy'
        reasonCode:
          $ref: '#/components/schemas/ReasonCode'
        reason:
          description: Free form reason why the Tokens are being suspended.
          type: string
          example: "Lost/stolen device"
          writeOnly: true

    CryptoGramResponse:
      x-model-version: 1.0
      description: Create CryptoGram resposne object model.
      type: object
      required:
        - token
        - crypto
      properties:
        token:
          $ref: '#/components/schemas/Token'
        crypto:
          $ref: '#/components/schemas/CryptoGram'

    GetAssetResponse:
      x-model-version: 1.0
      description: Get Asset respsone object model
      type: object
      required:
        - mediaContents
      properties:
        mediaContents:
          $ref: '#/components/schemas/MediaContents'

    NotificationResponse:
      x-model-version: 1.0
      description: Push notification request.
      type: object
      required:
        - notification
        - cardBrand
      properties:
        notification:
          $ref: '#/components/schemas/Notification'
        cardBrand:
          $ref: '#/components/schemas/CardBrand'

    StatusResponse:
      x-model-version: 1.0
      description: aSynch task status response.
      type: object
      properties:
        tokenReferenceId:
          description: A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime.
          type: string
          example: "5001a9f027e5629d11e3949a0800a"
          writeOnly: true

    Provision:
      x-model-version: 1.0
      description: Provision card information.
      type: object
      properties:
        card:
          $ref: '#/components/schemas/Card'
        tokenInfo:
          $ref: '#/components/schemas/TokenInfo'

    Notification:
      x-model-version: 1.0
      description: Notification request structure
      type: object
      properties:
        card:
          $ref: '#/components/schemas/Card'
        tokenInfo:
          $ref: '#/components/schemas/TokenInfo'

    MediaContents:
      x-model-version: 1.0
      description: Provision card information.
      type: object
      required:
        - mimeType
        - data
        - height
        - width
      properties:
        mimeType:
          description: Specified as a MIME type, which will be one of the following supported types applicatoin/pdf (for images must be a vector PDF image) image/png (includes alpha channel) text/plain text/html
          type: string
          example: "text/plain"
        data:
          description: The data for this item of media. Base64-encoded data, given in the format as specified in 'type'.
          type: string
          example: "encrypted_data bianry"
          readOnly: true
        height:
          description: For image assets, the height of this image. Specified in pixels.
          type: string
          example: "1024"
          readOnly: true
        width:
          description: For image assets, the width of this image. Specified in pixels.
          type: string
          example: "750"
          readOnly: true

    CryptoGram:
      x-model-version: 1.0
      description: Cryptogram resposne to merchant.
      type: object
      required:
        - cryptogram
      properties:
        cryptogram:
          description: The unique cryptogram valid only for a specific transaction.
          type: string
          readOnly: true
          example: "5001a9f027e5629d11e3949a0800a"
        eci:
          description: EC indicator for liability shift.
          type: string
          readOnly: true
          example: "12345"

    ExpiryDate:
      x-model-version: 1.0
      description: Contains account expiration data and needs to either send the values in individual fields OR as a singleValue.
      type: object
      required:
        - month
        - year
      properties:
        month:
          type: string
          description: Month format 'MM'
          pattern: "[0-9]{2,2}"
          minLength: 2
          maxLength: 2
          example: "09"
        year:
          type: string
          description: Year format 'YY'
          pattern: "[0-9]{2,2}"
          minLength: 2
          maxLength: 2
          example: "20"

    TokenInfo:
      x-model-version: 1.0
      description: Information related to network Tokens and reference Ids.
      type: object
      writeOnly: true
      required:
        - token
      properties:
        decision:
          $ref: '#/components/schemas/TokenStatus'
        token:
          $ref: '#/components/schemas/Token'

    NoContent:
      x-model-version: 1.0
      description: The request succeeded but there’s really nothing to show.

    EventNotificationRequest:
      x-model-version: 1.0
      description: The Event notification request form Fiserv To Merchant
      type: object
      writeOnly: true
      properties:
        eventType:
          $ref: '#/components/schemas/EventType'
        link:
          $ref: '#/components/schemas/Link'
        id:
          description:  Reference Id for get call.
          type: string
          example: "6001a9f027e5629d11e3949a0800a"


    #-------------------------------------
    # ENUM Models
    #-------------------------------------

    EventType:
      x-model-version: 1.0
      description: Types of notificaton events
      type: string
      readOnly: true
      example: ACTIVE
      enum:
        - TOKEN_UPDATE
        - PAN_EXPIRE_UPDATE
        - TOKEN_STATE_UPDATE

    TokenStatus:
      x-model-version: 1.0
      description: Indicates the status of an token.
      type: string
      readOnly: true
      example: ACTIVE
      enum:
        - ACTIVE
        - INACTIVE
        - SUSPENDED
        - DEACTIVATED
        - DECLINED
        - APPROVED

    Operation:
      x-model-version: 1.0
      description: Indicates the type of operation to be performed. Applicable values are defined belo.
      type: string
      example: SUSPEND
      enum:
        - SUSPEND
        - RESUME
        - DELETE
        - REISSUE
        - UPDATE

    CardBrand:
      x-model-version: 1.0
      description: A reference id provided to merchant in the response. This is to identtify source of tokenReferenceId. probabile values are define as enum.
      type: string
      example: VI
      enum:
        - VI
        - AX
        - DI
        - MC
        - RU

    CausedBy:
      x-model-version: 1.0
      description: Who or what caused the Token to be suspended. Must be either the 'CARDHOLDER' (operation requested by the Cardholder) or 'TOKEN_REQUESTOR' (operation requested by the token requestor).
      type: string
      example: CARDHOLDER
      enum:
        - CARDHOLDER
        - TOKEN_REQUESTOR

    ReasonCode:
      x-model-version: 1.0
      description: The reason for the action to be suspended. Must be one of 'SUSPECTED_FRAUD' (suspected fraudulent token transactions), 'OTHER' (Other - default used if value not provided).
      type: string
      example: FRAUD
      enum:
        - FRAUD
        - CUSTOMER_CONFIRMED
        - OTHER

  examples:

    PaymentCardProvisionRequest:
      value:
        source:
          sourceType: 'PaymentCard'
          card:
            cardData: '4005550000000019'
            expirationMonth: '02'
            expirationYear: '2035'
            scheme: 'VISA'
        merchantDetails:
          terminalId: '123456'
          merchantId: '123456789012345'

    PaymentTokenProvisionRequest:
      value:
        source:
          sourceType: 'PaymentToken'
          tokenData: '1234560000000019'
          tokenSource: 'TRANSARMOR'
        merchantDetails:
          terminalId: '123456'
          merchantId: '123456789012345'

    ProvisionQueueResponse:
      value:
        gatewayResponse:
          transactionProcessingDetails:
            transactionTimestamp: '2021-06-20T23:42:48Z'
            apiTraceId: '362866ac81864d7c9d1ff8b5aa6e98db'
            clientRequestId: '30dd879c-ee2f-11db-8314-0800200c9a66'
            transactionId: '362866ac81864d7c9d1ff8b5aa6e98db'
        source:
          card:
            bin: '40055500'
            last4: '0019'
            scheme: 'VISA'
            expirationMonth: '10'
            expirationYear: '30'

    ProvisionTokenResponse:
      value:
        gatewayResponse:
          transactionProcessingDetails:
            transactionTimestamp: '2021-06-20T23:42:48Z'
            apiTraceId: '362866ac81864d7c9d1ff8b5aa6e98db'
            clientRequestId: '30dd879c-ee2f-11db-8314-0800200c9a66'
            transactionId: '362866ac81864d7c9d1ff8b5aa6e98db'
        paymentTokens:
          tokenRequestorId: 'AAA008UU'
          tokenData: '4895370015665612'
          paymentAccountReferenceId: 'V0010013021172823274978766290'
          expirationMonth: '10'
          expirationYear: '30'
          tokenSource: 'VISA'
          provisionTokenId: 'a6a4f07c2777f450ce451a0f747a8f02'
        card:
          last4: '9678'
          bin: "40055500"
          expirationMonth: '10'
          expirationYear: '2030'
          scheme: 'VISA'

    ProvisionTAResponse:
      value:
        gatewayResponse:
          transactionProcessingDetails:
            transactionTimestamp: '2021-06-20T23:42:48Z'
            apiTraceId: '362866ac81864d7c9d1ff8b5aa6e98db'
            clientRequestId: '30dd879c-ee2f-11db-8314-0800200c9a66'
            transactionId: '362866ac81864d7c9d1ff8b5aa6e98db'
        paymentTokens:
          tokenData: '4895370015665612'
          tokenSource: 'TRANSARMOR'
        card:
          last4: '9678'
          bin: "40055500"
          expirationMonth: '10'
          expirationYear: '2030'
          scheme: 'VISA'

    TransactRequest:
      value:
        transact:
          transactionType: 'ECOM'
          scheme: 'VISA'

    TransactResponse:
      value:
        gatewayResponse:
          transactionProcessingDetails:
            transactionTimestamp: '2021-06-20T23:42:48Z'
            apiTraceId: '362866ac81864d7c9d1ff8b5aa6e98db'
            clientRequestId: '30dd879c-ee2f-11db-8314-0800200c9a66'
        paymentTokens:
          tokenRequestorId: '50175692476'
          tokenData: '5204736200176909'
          tokenSource: 'VISA'
          paymentAccountReferenceId: 'V0010013021015339622318943186'
          expirationMonth: '10'
          expirationYear: '30'
          provisionTokenId: '46d233d2780ba4480c1f1e6abd4f7002'
        transact:
          eci: '123'
          panSequenceNumber: '00'
          track2Equivalent: '5204736200176909D25041000000000000000F'
          cryptogram: 'ABpQmfNkuzAqAAKxV1JzAAADFA=='
          scheme: 'VISA'

    StatusResponse:
      value:
        gatewayResponse:
          transactionProcessingDetails:
            transactionTimestamp: '2021-06-20T23:42:48Z'
            apiTraceId: '362866ac81864d7c9d1ff8b5aa6e98db'
            clientRequestId: '30dd879c-ee2f-11db-8314-0800200c9a66'
        paymentTokens:
          tokenReferenceId: 'DNITHE302214550865262804'
          decision: 'ACTIVE'
          tokenSource: 'VISA'

    TokenLookupResponse:
      value:
        gatewayResponse:
          transactionProcessingDetails:
            transactionTimestamp: '2022-10-16T20:30:50.828Z'
            apiTraceId: 'da19bd3663724d90a103b4371b14a090'
            clientRequestId: '2dcdb755-2d54-4107-aab9-04e7ee088d05'
        paymentTokens:
          tokenRequestorId: 'AAA008UU'
          tokenData: '4895370015665612'
          paymentAccountReferenceId: 'V0010013021172823274978766290'
          expirationMonth: '10'
          expirationYear: '30'
          tokenSource: 'VISA'
          provisionTokenId: 'a6a4f07c2777f450ce451a0f747a8f02'
        card:
          last4: '9678'
          bin: "40055500"
          expirationMonth: '10'
          expirationYear: '2030'
          scheme: 'VISA'

    TokenAssetResponse:
      value:
        gatewayResponse:
          transactionProcessingDetails:
            transactionTimestamp: '2022-10-16T20:30:50.828Z'
            apiTraceId: 'ba6cd5305f314514b5dea5e5b4b22580'
            clientRequestId: '59a39056-b758-4f5a-a112-e23c3e145125'
        media:
          altText: 'Front_Image'
          contentType: 'cardSymbol'
          mimeType: 'image/png'
          width: '200'
          height: '200'
          encodedData: 'R0l...aP='

    EventResponse:
      value:
        gatewayResponse:
          transactionProcessingDetails:
            transactionTimestamp: '2022-10-16T20:30:50.828Z'
            apiTraceId: 'ba6cd5305f314514b5dea5e5b4b22580'
            clientRequestId: '59a39056-b758-4f5a-a112-e23c3e145125'
        eventype: 'TOKEN_UPDATE_EVENT'
        paymentTokens:
          tokenRequestorId: 'AAA008UU'
          tokenData: '4895370015665612'
          paymentAccountReferenceId: 'V0010013021172823274978766290'
          expirationMonth: '10'
          expirationYear: '30'
          tokenSource: 'VISA'
          provisionTokenId: 'a6a4f07c2777f450ce451a0f747a8f02'
        card:
          last4: '9678'
          bin: "40055500"
          expirationMonth: '10'
          expirationYear: '2030'
          scheme: 'VISA'

    TokenizationMockResponse:
      value:
        provision:
          card:
            alias: '4567'
            cardBrandLogoAssetId: SOME_RANDOM_ID
            cardBrandDescription: SHORT_DESCRIPTION
            expiryDate:
              month: '09'
              year: '20'
          tokenInfo:
            decision: ACTIVE
            token:
              tokenReferenceId: 5001a9f027e5629d11e3949a0800a
              expiryDate:
                month: '09'
                year: '20'
              alias: '1111'
              paymentAccountReferenceId: 5001a9f027e5629d11e3949a0800a
              tokenRequestorId: '2901'
              fiservTokenRequestorId: MSTF-2901
              paymentToken: 5001a9f027e5629d11e3949a0800a
              provisionTokenId: 6001a9f027e5629d11e3949a0800a
        cardBrand: VI

    AsyncTokenizationMockResponse:
      value:
        clientRequestId: '5001a9f027e5629d11e3949a0800a'
        provisionRequestId: '5001a9f027e5629d11e3949a0800a'
        cardBrand: VI
        createdDate: '5001a9f027e5629d11e3949a0800a'

    CryptogramMockResposne:
      value:
        token:
          fiservTokenRequestorId: AAA008UU
          expiryDate:
            month: '04'
            year: '25'
            date: '30'
          tokenRequestorId: '50175692476'
          paymentToken: '5204736200176909'
          panSequenceNumber: '00'
          track2Equivalent: 5204736200176909D25041000000000000000F
        crypto:
          cryptogram: ABpQmfNkuzAqAAKxV1JzAAADFA==
          eci: '123'

    ProvisionTokenMockRequest:
      value:
        provision:
          card:
            cardNumber: '5204736190003139'
            expiryDate:
              month: '12'
              year: '22'

    ProvisionTokenTAMockRequest:
      value:
        provision:
          tokenInfo:
            token:
              transArmorToken: '5204736190003139'
              tokenType: '2754'

    UpdateTokenMockRequest:
      value:
        operation: RESUME
        updateReason:
          causedBy: CARDHOLDER
          reasonCode: OTHER
          reason: Lost/stolen device

    GetAssetMockResponse:
      value:
        mediaContents:
          mimeType: text/plain
          data: encrypted_data bianry
          height: '1024'
          width: '750'

    StatusMockResponse:
      value:
        tokenReferenceId: '5001a9f027e5629d11e3949a0800a'

    NotificationMockResponse:
      value:
        notification:
          card:
            alias: '4567'
            cardBrandLogoAssetId: SOME_RANDOM_ID
            cardBrandDescription: SHORT_DESCRIPTION
            expiryDate:
              month: '09'
              year: '20'
          tokenInfo:
            decision: ACTIVE
            token:
              tokenReferenceId: 5001a9f027e5629d11e3949a0800a
              expiryDate:
                month: '09'
                year: '20'
              alias: '1111'
              paymentAccountReferenceId: 5001a9f027e5629d11e3949a0800a
              tokenRequestorId: '2901'
              paymentToken: 5001a9f027e5629d11e3949a0800a
              provisionTokenId: 6001a9f027e5629d11e3949a0800a
        cardBrand: VI

    NotificationLifeCycleMockResponse:
      value:
        notification:
          card:
            alias: '4567'
            expiryDate:
              month: '09'
              year: '20'
          tokenInfo:
            decision: ACTIVE
            token:
              tokenReferenceId: 5001a9f027e5629d11e3949a0800a
              expiryDate:
                month: '09'
                year: '20'
              alias: '1111'
              tokenRequestorId: '2901'
        cardBrand: VI

    NotificationLifeCycleStatusOnlyMockResponse:
      value:
        notification:
          tokenInfo:
            decision: ACTIVE
            token:
              tokenReferenceId: 5001a9f027e5629d11e3949a0800a
              expiryDate:
                month: '09'
                year: '20'
              alias: '1111'
              tokenRequestorId: '2901'
        cardBrand: VI

    EventNotificationTokensMockRequest:
      value:
        eventType: PAN_EXPIRE_UPDATE
        id: 5001a9f027e5629d11e3949a0800a11
        link:
          href: https://cert.fiservapps.com/v1/tokens/5001a9f027e5629d11e3949a0800a11
          method: get


    NoContent:
      value:

